package com.highwayac.com.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StripeCheckoutSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStripeCheckoutSessionAllPropertiesEquals(StripeCheckoutSession expected, StripeCheckoutSession actual) {
        assertStripeCheckoutSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertStripeCheckoutSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStripeCheckoutSessionAllUpdatablePropertiesEquals(
        StripeCheckoutSession expected,
        StripeCheckoutSession actual
    ) {
        assertStripeCheckoutSessionUpdatableFieldsEquals(expected, actual);
        assertStripeCheckoutSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStripeCheckoutSessionAutoGeneratedPropertiesEquals(
        StripeCheckoutSession expected,
        StripeCheckoutSession actual
    ) {
        assertThat(expected)
            .as("Verify StripeCheckoutSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStripeCheckoutSessionUpdatableFieldsEquals(StripeCheckoutSession expected, StripeCheckoutSession actual) {
        assertThat(expected)
            .as("Verify StripeCheckoutSession relevant properties")
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getAmountSubtotal()).as("check amountSubtotal").isEqualTo(actual.getAmountSubtotal()))
            .satisfies(e -> assertThat(e.getAmountTotal()).as("check amountTotal").isEqualTo(actual.getAmountTotal()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getClientReferenceId()).as("check clientReferenceId").isEqualTo(actual.getClientReferenceId()))
            .satisfies(e -> assertThat(e.getPaymentIntent()).as("check paymentIntent").isEqualTo(actual.getPaymentIntent()))
            .satisfies(e -> assertThat(e.getPaymentStatus()).as("check paymentStatus").isEqualTo(actual.getPaymentStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStripeCheckoutSessionUpdatableRelationshipsEquals(
        StripeCheckoutSession expected,
        StripeCheckoutSession actual
    ) {}
}

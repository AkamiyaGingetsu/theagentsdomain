/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AssistantToolsCode } from './assistantToolsCode';
import { AssistantToolsFileSearch } from './assistantToolsFileSearch';
import { AssistantToolsFunction } from './assistantToolsFunction';
import { AssistantsApiResponseFormatOption } from './assistantsApiResponseFormatOption';
import { AssistantsApiToolChoiceOption } from './assistantsApiToolChoiceOption';
import { RunCompletionUsage } from './runCompletionUsage';
import { RunObjectIncompleteDetails } from './runObjectIncompleteDetails';
import { RunObjectLastError } from './runObjectLastError';
import { RunObjectRequiredAction } from './runObjectRequiredAction';
import { TruncationObject } from './truncationObject';

/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 */
export interface RunObject { 
    /**
     * The identifier, which can be referenced in API endpoints.
     */
    id: string;
    /**
     * The object type, which is always `thread.run`.
     */
    object: RunObject.ObjectEnum;
    /**
     * The Unix timestamp (in seconds) for when the run was created.
     */
    createdAt: number;
    /**
     * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
     */
    threadId: string;
    /**
     * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
     */
    assistantId: string;
    /**
     * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
     */
    status: RunObject.StatusEnum;
    requiredAction: RunObjectRequiredAction;
    lastError: RunObjectLastError;
    /**
     * The Unix timestamp (in seconds) for when the run will expire.
     */
    expiresAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run was started.
     */
    startedAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run was cancelled.
     */
    cancelledAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run failed.
     */
    failedAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run was completed.
     */
    completedAt: number;
    incompleteDetails: RunObjectIncompleteDetails;
    /**
     * The model that the [assistant](/docs/api-reference/assistants) used for this run.
     */
    model: string;
    /**
     * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
     */
    instructions: string;
    /**
     * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     */
    tools: Array<AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction>;
    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     */
    metadata: any;
    usage: RunCompletionUsage;
    /**
     * The sampling temperature used for this run. If not set, defaults to 1.
     */
    temperature?: number;
    /**
     * The nucleus sampling value used for this run. If not set, defaults to 1.
     */
    topP?: number;
    /**
     * The maximum number of prompt tokens specified to have been used over the course of the run. 
     */
    maxPromptTokens: number;
    /**
     * The maximum number of completion tokens specified to have been used over the course of the run. 
     */
    maxCompletionTokens: number;
    truncationStrategy: TruncationObject;
    toolChoice: AssistantsApiToolChoiceOption;
    responseFormat: AssistantsApiResponseFormatOption;
}
export namespace RunObject {
    export type ObjectEnum = 'thread.run';
    export const ObjectEnum = {
        ThreadRun: 'thread.run' as ObjectEnum
    };
    export type StatusEnum = 'queued' | 'in_progress' | 'requires_action' | 'cancelling' | 'cancelled' | 'failed' | 'completed' | 'incomplete' | 'expired';
    export const StatusEnum = {
        Queued: 'queued' as StatusEnum,
        InProgress: 'in_progress' as StatusEnum,
        RequiresAction: 'requires_action' as StatusEnum,
        Cancelling: 'cancelling' as StatusEnum,
        Cancelled: 'cancelled' as StatusEnum,
        Failed: 'failed' as StatusEnum,
        Completed: 'completed' as StatusEnum,
        Incomplete: 'incomplete' as StatusEnum,
        Expired: 'expired' as StatusEnum
    };
}
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssistantObject } from '../model/assistantObject';
import { CreateAssistantRequest } from '../model/createAssistantRequest';
import { CreateMessageRequest } from '../model/createMessageRequest';
import { CreateRunRequest } from '../model/createRunRequest';
import { CreateThreadAndRunRequest } from '../model/createThreadAndRunRequest';
import { CreateThreadRequest } from '../model/createThreadRequest';
import { DeleteAssistantResponse } from '../model/deleteAssistantResponse';
import { DeleteMessageResponse } from '../model/deleteMessageResponse';
import { DeleteThreadResponse } from '../model/deleteThreadResponse';
import { ListAssistantsResponse } from '../model/listAssistantsResponse';
import { ListMessagesResponse } from '../model/listMessagesResponse';
import { ListRunStepsResponse } from '../model/listRunStepsResponse';
import { ListRunsResponse } from '../model/listRunsResponse';
import { MessageObject } from '../model/messageObject';
import { ModifyAssistantRequest } from '../model/modifyAssistantRequest';
import { ModifyMessageRequest } from '../model/modifyMessageRequest';
import { ModifyRunRequest } from '../model/modifyRunRequest';
import { ModifyThreadRequest } from '../model/modifyThreadRequest';
import { RunObject } from '../model/runObject';
import { RunStepObject } from '../model/runStepObject';
import { SubmitToolOutputsRunRequest } from '../model/submitToolOutputsRunRequest';
import { ThreadObject } from '../model/threadObject';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssistantsService {

    protected basePath = 'https://api.openai.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     * 
     * @param threadId The ID of the thread to which this run belongs.
     * @param runId The ID of the run to cancel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelRun(threadId: string, runId: string, observe?: 'body', reportProgress?: boolean): Observable<RunObject>;
    public cancelRun(threadId: string, runId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunObject>>;
    public cancelRun(threadId: string, runId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunObject>>;
    public cancelRun(threadId: string, runId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling cancelRun.');
        }

        if (runId === null || runId === undefined) {
            throw new Error('Required parameter runId was null or undefined when calling cancelRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RunObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/cancel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an assistant with a model and instructions.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAssistant(body: CreateAssistantRequest, observe?: 'body', reportProgress?: boolean): Observable<AssistantObject>;
    public createAssistant(body: CreateAssistantRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssistantObject>>;
    public createAssistant(body: CreateAssistantRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssistantObject>>;
    public createAssistant(body: CreateAssistantRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createAssistant.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AssistantObject>('post',`${this.basePath}/assistants`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a message.
     * 
     * @param body 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMessage(body: CreateMessageRequest, threadId: string, observe?: 'body', reportProgress?: boolean): Observable<MessageObject>;
    public createMessage(body: CreateMessageRequest, threadId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageObject>>;
    public createMessage(body: CreateMessageRequest, threadId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageObject>>;
    public createMessage(body: CreateMessageRequest, threadId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createMessage.');
        }

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling createMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<MessageObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a run.
     * 
     * @param body 
     * @param threadId The ID of the thread to run.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRun(body: CreateRunRequest, threadId: string, observe?: 'body', reportProgress?: boolean): Observable<RunObject>;
    public createRun(body: CreateRunRequest, threadId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunObject>>;
    public createRun(body: CreateRunRequest, threadId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunObject>>;
    public createRun(body: CreateRunRequest, threadId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createRun.');
        }

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling createRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RunObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a thread.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createThread(body?: CreateThreadRequest, observe?: 'body', reportProgress?: boolean): Observable<ThreadObject>;
    public createThread(body?: CreateThreadRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ThreadObject>>;
    public createThread(body?: CreateThreadRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ThreadObject>>;
    public createThread(body?: CreateThreadRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ThreadObject>('post',`${this.basePath}/threads`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a thread and run it in one request.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createThreadAndRun(body: CreateThreadAndRunRequest, observe?: 'body', reportProgress?: boolean): Observable<RunObject>;
    public createThreadAndRun(body: CreateThreadAndRunRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunObject>>;
    public createThreadAndRun(body: CreateThreadAndRunRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunObject>>;
    public createThreadAndRun(body: CreateThreadAndRunRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createThreadAndRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RunObject>('post',`${this.basePath}/threads/runs`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an assistant.
     * 
     * @param assistantId The ID of the assistant to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAssistant(assistantId: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteAssistantResponse>;
    public deleteAssistant(assistantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteAssistantResponse>>;
    public deleteAssistant(assistantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteAssistantResponse>>;
    public deleteAssistant(assistantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assistantId === null || assistantId === undefined) {
            throw new Error('Required parameter assistantId was null or undefined when calling deleteAssistant.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeleteAssistantResponse>('delete',`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a message.
     * 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMessage(threadId: string, messageId: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteMessageResponse>;
    public deleteMessage(threadId: string, messageId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteMessageResponse>>;
    public deleteMessage(threadId: string, messageId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteMessageResponse>>;
    public deleteMessage(threadId: string, messageId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling deleteMessage.');
        }

        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling deleteMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeleteMessageResponse>('delete',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a thread.
     * 
     * @param threadId The ID of the thread to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteThread(threadId: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteThreadResponse>;
    public deleteThread(threadId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteThreadResponse>>;
    public deleteThread(threadId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteThreadResponse>>;
    public deleteThread(threadId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling deleteThread.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeleteThreadResponse>('delete',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves an assistant.
     * 
     * @param assistantId The ID of the assistant to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssistant(assistantId: string, observe?: 'body', reportProgress?: boolean): Observable<AssistantObject>;
    public getAssistant(assistantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssistantObject>>;
    public getAssistant(assistantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssistantObject>>;
    public getAssistant(assistantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assistantId === null || assistantId === undefined) {
            throw new Error('Required parameter assistantId was null or undefined when calling getAssistant.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AssistantObject>('get',`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a message.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
     * @param messageId The ID of the message to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMessage(threadId: string, messageId: string, observe?: 'body', reportProgress?: boolean): Observable<MessageObject>;
    public getMessage(threadId: string, messageId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageObject>>;
    public getMessage(threadId: string, messageId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageObject>>;
    public getMessage(threadId: string, messageId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling getMessage.');
        }

        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MessageObject>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRun(threadId: string, runId: string, observe?: 'body', reportProgress?: boolean): Observable<RunObject>;
    public getRun(threadId: string, runId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunObject>>;
    public getRun(threadId: string, runId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunObject>>;
    public getRun(threadId: string, runId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling getRun.');
        }

        if (runId === null || runId === undefined) {
            throw new Error('Required parameter runId was null or undefined when calling getRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RunObject>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a run step.
     * 
     * @param threadId The ID of the thread to which the run and run step belongs.
     * @param runId The ID of the run to which the run step belongs.
     * @param stepId The ID of the run step to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRunStep(threadId: string, runId: string, stepId: string, observe?: 'body', reportProgress?: boolean): Observable<RunStepObject>;
    public getRunStep(threadId: string, runId: string, stepId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunStepObject>>;
    public getRunStep(threadId: string, runId: string, stepId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunStepObject>>;
    public getRunStep(threadId: string, runId: string, stepId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling getRunStep.');
        }

        if (runId === null || runId === undefined) {
            throw new Error('Required parameter runId was null or undefined when calling getRunStep.');
        }

        if (stepId === null || stepId === undefined) {
            throw new Error('Required parameter stepId was null or undefined when calling getRunStep.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RunStepObject>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/steps/${encodeURIComponent(String(stepId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a thread.
     * 
     * @param threadId The ID of the thread to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getThread(threadId: string, observe?: 'body', reportProgress?: boolean): Observable<ThreadObject>;
    public getThread(threadId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ThreadObject>>;
    public getThread(threadId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ThreadObject>>;
    public getThread(threadId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling getThread.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ThreadObject>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of assistants.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAssistants(limit?: number, order?: string, after?: string, before?: string, observe?: 'body', reportProgress?: boolean): Observable<ListAssistantsResponse>;
    public listAssistants(limit?: number, order?: string, after?: string, before?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListAssistantsResponse>>;
    public listAssistants(limit?: number, order?: string, after?: string, before?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListAssistantsResponse>>;
    public listAssistants(limit?: number, order?: string, after?: string, before?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListAssistantsResponse>('get',`${this.basePath}/assistants`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of messages for a given thread.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param runId Filter messages by the run ID that generated them. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listMessages(threadId: string, limit?: number, order?: string, after?: string, before?: string, runId?: string, observe?: 'body', reportProgress?: boolean): Observable<ListMessagesResponse>;
    public listMessages(threadId: string, limit?: number, order?: string, after?: string, before?: string, runId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListMessagesResponse>>;
    public listMessages(threadId: string, limit?: number, order?: string, after?: string, before?: string, runId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListMessagesResponse>>;
    public listMessages(threadId: string, limit?: number, order?: string, after?: string, before?: string, runId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling listMessages.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }
        if (runId !== undefined && runId !== null) {
            queryParameters = queryParameters.set('run_id', <any>runId);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListMessagesResponse>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of run steps belonging to a run.
     * 
     * @param threadId The ID of the thread the run and run steps belong to.
     * @param runId The ID of the run the run steps belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: string, after?: string, before?: string, observe?: 'body', reportProgress?: boolean): Observable<ListRunStepsResponse>;
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: string, after?: string, before?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListRunStepsResponse>>;
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: string, after?: string, before?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListRunStepsResponse>>;
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: string, after?: string, before?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling listRunSteps.');
        }

        if (runId === null || runId === undefined) {
            throw new Error('Required parameter runId was null or undefined when calling listRunSteps.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListRunStepsResponse>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/steps`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of runs belonging to a thread.
     * 
     * @param threadId The ID of the thread the run belongs to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listRuns(threadId: string, limit?: number, order?: string, after?: string, before?: string, observe?: 'body', reportProgress?: boolean): Observable<ListRunsResponse>;
    public listRuns(threadId: string, limit?: number, order?: string, after?: string, before?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListRunsResponse>>;
    public listRuns(threadId: string, limit?: number, order?: string, after?: string, before?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListRunsResponse>>;
    public listRuns(threadId: string, limit?: number, order?: string, after?: string, before?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling listRuns.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListRunsResponse>('get',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies an assistant.
     * 
     * @param body 
     * @param assistantId The ID of the assistant to modify.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyAssistant(body: ModifyAssistantRequest, assistantId: string, observe?: 'body', reportProgress?: boolean): Observable<AssistantObject>;
    public modifyAssistant(body: ModifyAssistantRequest, assistantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssistantObject>>;
    public modifyAssistant(body: ModifyAssistantRequest, assistantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssistantObject>>;
    public modifyAssistant(body: ModifyAssistantRequest, assistantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling modifyAssistant.');
        }

        if (assistantId === null || assistantId === undefined) {
            throw new Error('Required parameter assistantId was null or undefined when calling modifyAssistant.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AssistantObject>('post',`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies a message.
     * 
     * @param body 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to modify.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyMessage(body: ModifyMessageRequest, threadId: string, messageId: string, observe?: 'body', reportProgress?: boolean): Observable<MessageObject>;
    public modifyMessage(body: ModifyMessageRequest, threadId: string, messageId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageObject>>;
    public modifyMessage(body: ModifyMessageRequest, threadId: string, messageId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageObject>>;
    public modifyMessage(body: ModifyMessageRequest, threadId: string, messageId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling modifyMessage.');
        }

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling modifyMessage.');
        }

        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling modifyMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<MessageObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies a run.
     * 
     * @param body 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to modify.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyRun(body: ModifyRunRequest, threadId: string, runId: string, observe?: 'body', reportProgress?: boolean): Observable<RunObject>;
    public modifyRun(body: ModifyRunRequest, threadId: string, runId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunObject>>;
    public modifyRun(body: ModifyRunRequest, threadId: string, runId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunObject>>;
    public modifyRun(body: ModifyRunRequest, threadId: string, runId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling modifyRun.');
        }

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling modifyRun.');
        }

        if (runId === null || runId === undefined) {
            throw new Error('Required parameter runId was null or undefined when calling modifyRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RunObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies a thread.
     * 
     * @param body 
     * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyThread(body: ModifyThreadRequest, threadId: string, observe?: 'body', reportProgress?: boolean): Observable<ThreadObject>;
    public modifyThread(body: ModifyThreadRequest, threadId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ThreadObject>>;
    public modifyThread(body: ModifyThreadRequest, threadId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ThreadObject>>;
    public modifyThread(body: ModifyThreadRequest, threadId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling modifyThread.');
        }

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling modifyThread.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ThreadObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
     * 
     * @param body 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
     * @param runId The ID of the run that requires the tool output submission.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public submitToolOuputsToRun(body: SubmitToolOutputsRunRequest, threadId: string, runId: string, observe?: 'body', reportProgress?: boolean): Observable<RunObject>;
    public submitToolOuputsToRun(body: SubmitToolOutputsRunRequest, threadId: string, runId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunObject>>;
    public submitToolOuputsToRun(body: SubmitToolOutputsRunRequest, threadId: string, runId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunObject>>;
    public submitToolOuputsToRun(body: SubmitToolOutputsRunRequest, threadId: string, runId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitToolOuputsToRun.');
        }

        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling submitToolOuputsToRun.');
        }

        if (runId === null || runId === undefined) {
            throw new Error('Required parameter runId was null or undefined when calling submitToolOuputsToRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RunObject>('post',`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/submit_tool_outputs`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

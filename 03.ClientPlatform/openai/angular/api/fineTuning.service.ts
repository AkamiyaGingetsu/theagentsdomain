/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateFineTuningJobRequest } from '../model/createFineTuningJobRequest';
import { FineTuningJob } from '../model/fineTuningJob';
import { ListFineTuningJobCheckpointsResponse } from '../model/listFineTuningJobCheckpointsResponse';
import { ListFineTuningJobEventsResponse } from '../model/listFineTuningJobEventsResponse';
import { ListPaginatedFineTuningJobsResponse } from '../model/listPaginatedFineTuningJobsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FineTuningService {

    protected basePath = 'https://api.openai.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Immediately cancel a fine-tune job. 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelFineTuningJob(fineTuningJobId: string, observe?: 'body', reportProgress?: boolean): Observable<FineTuningJob>;
    public cancelFineTuningJob(fineTuningJobId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FineTuningJob>>;
    public cancelFineTuningJob(fineTuningJobId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FineTuningJob>>;
    public cancelFineTuningJob(fineTuningJobId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fineTuningJobId === null || fineTuningJobId === undefined) {
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling cancelFineTuningJob.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FineTuningJob>('post',`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}/cancel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFineTuningJob(body: CreateFineTuningJobRequest, observe?: 'body', reportProgress?: boolean): Observable<FineTuningJob>;
    public createFineTuningJob(body: CreateFineTuningJobRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FineTuningJob>>;
    public createFineTuningJob(body: CreateFineTuningJobRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FineTuningJob>>;
    public createFineTuningJob(body: CreateFineTuningJobRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createFineTuningJob.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FineTuningJob>('post',`${this.basePath}/fine_tuning/jobs`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get status updates for a fine-tuning job. 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for. 
     * @param after Identifier for the last event from the previous pagination request.
     * @param limit Number of events to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<ListFineTuningJobEventsResponse>;
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListFineTuningJobEventsResponse>>;
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListFineTuningJobEventsResponse>>;
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fineTuningJobId === null || fineTuningJobId === undefined) {
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling listFineTuningEvents.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListFineTuningJobEventsResponse>('get',`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List checkpoints for a fine-tuning job. 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
     * @param after Identifier for the last checkpoint ID from the previous pagination request.
     * @param limit Number of checkpoints to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<ListFineTuningJobCheckpointsResponse>;
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListFineTuningJobCheckpointsResponse>>;
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListFineTuningJobCheckpointsResponse>>;
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fineTuningJobId === null || fineTuningJobId === undefined) {
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling listFineTuningJobCheckpoints.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListFineTuningJobCheckpointsResponse>('get',`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}/checkpoints`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List your organization&#x27;s fine-tuning jobs 
     * 
     * @param after Identifier for the last job from the previous pagination request.
     * @param limit Number of fine-tuning jobs to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<ListPaginatedFineTuningJobsResponse>;
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListPaginatedFineTuningJobsResponse>>;
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListPaginatedFineTuningJobsResponse>>;
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListPaginatedFineTuningJobsResponse>('get',`${this.basePath}/fine_tuning/jobs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveFineTuningJob(fineTuningJobId: string, observe?: 'body', reportProgress?: boolean): Observable<FineTuningJob>;
    public retrieveFineTuningJob(fineTuningJobId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FineTuningJob>>;
    public retrieveFineTuningJob(fineTuningJobId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FineTuningJob>>;
    public retrieveFineTuningJob(fineTuningJobId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fineTuningJobId === null || fineTuningJobId === undefined) {
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling retrieveFineTuningJob.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FineTuningJob>('get',`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

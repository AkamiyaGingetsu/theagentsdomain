/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateVectorStoreFileBatchRequest } from '../model/createVectorStoreFileBatchRequest';
import { CreateVectorStoreFileRequest } from '../model/createVectorStoreFileRequest';
import { CreateVectorStoreRequest } from '../model/createVectorStoreRequest';
import { DeleteVectorStoreFileResponse } from '../model/deleteVectorStoreFileResponse';
import { DeleteVectorStoreResponse } from '../model/deleteVectorStoreResponse';
import { ListVectorStoreFilesResponse } from '../model/listVectorStoreFilesResponse';
import { ListVectorStoresResponse } from '../model/listVectorStoresResponse';
import { UpdateVectorStoreRequest } from '../model/updateVectorStoreRequest';
import { VectorStoreFileBatchObject } from '../model/vectorStoreFileBatchObject';
import { VectorStoreFileObject } from '../model/vectorStoreFileObject';
import { VectorStoreObject } from '../model/vectorStoreObject';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VectorStoresService {

    protected basePath = 'https://api.openai.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch to cancel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreFileBatchObject>;
    public cancelVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreFileBatchObject>>;
    public cancelVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreFileBatchObject>>;
    public cancelVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling cancelVectorStoreFileBatch.');
        }

        if (batchId === null || batchId === undefined) {
            throw new Error('Required parameter batchId was null or undefined when calling cancelVectorStoreFileBatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VectorStoreFileBatchObject>('post',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/file_batches/${encodeURIComponent(String(batchId))}/cancel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a vector store.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVectorStore(body: CreateVectorStoreRequest, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreObject>;
    public createVectorStore(body: CreateVectorStoreRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreObject>>;
    public createVectorStore(body: CreateVectorStoreRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreObject>>;
    public createVectorStore(body: CreateVectorStoreRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createVectorStore.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<VectorStoreObject>('post',`${this.basePath}/vector_stores`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     * 
     * @param body 
     * @param vectorStoreId The ID of the vector store for which to create a File. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVectorStoreFile(body: CreateVectorStoreFileRequest, vectorStoreId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreFileObject>;
    public createVectorStoreFile(body: CreateVectorStoreFileRequest, vectorStoreId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreFileObject>>;
    public createVectorStoreFile(body: CreateVectorStoreFileRequest, vectorStoreId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreFileObject>>;
    public createVectorStoreFile(body: CreateVectorStoreFileRequest, vectorStoreId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createVectorStoreFile.');
        }

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling createVectorStoreFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<VectorStoreFileObject>('post',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/files`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a vector store file batch.
     * 
     * @param body 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVectorStoreFileBatch(body: CreateVectorStoreFileBatchRequest, vectorStoreId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreFileBatchObject>;
    public createVectorStoreFileBatch(body: CreateVectorStoreFileBatchRequest, vectorStoreId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreFileBatchObject>>;
    public createVectorStoreFileBatch(body: CreateVectorStoreFileBatchRequest, vectorStoreId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreFileBatchObject>>;
    public createVectorStoreFileBatch(body: CreateVectorStoreFileBatchRequest, vectorStoreId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createVectorStoreFileBatch.');
        }

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling createVectorStoreFileBatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<VectorStoreFileBatchObject>('post',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/file_batches`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVectorStore(vectorStoreId: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteVectorStoreResponse>;
    public deleteVectorStore(vectorStoreId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteVectorStoreResponse>>;
    public deleteVectorStore(vectorStoreId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteVectorStoreResponse>>;
    public deleteVectorStore(vectorStoreId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling deleteVectorStore.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeleteVectorStoreResponse>('delete',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVectorStoreFile(vectorStoreId: string, fileId: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteVectorStoreFileResponse>;
    public deleteVectorStoreFile(vectorStoreId: string, fileId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteVectorStoreFileResponse>>;
    public deleteVectorStoreFile(vectorStoreId: string, fileId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteVectorStoreFileResponse>>;
    public deleteVectorStoreFile(vectorStoreId: string, fileId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling deleteVectorStoreFile.');
        }

        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling deleteVectorStoreFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeleteVectorStoreFileResponse>('delete',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/files/${encodeURIComponent(String(fileId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVectorStore(vectorStoreId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreObject>;
    public getVectorStore(vectorStoreId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreObject>>;
    public getVectorStore(vectorStoreId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreObject>>;
    public getVectorStore(vectorStoreId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling getVectorStore.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VectorStoreObject>('get',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file being retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVectorStoreFile(vectorStoreId: string, fileId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreFileObject>;
    public getVectorStoreFile(vectorStoreId: string, fileId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreFileObject>>;
    public getVectorStoreFile(vectorStoreId: string, fileId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreFileObject>>;
    public getVectorStoreFile(vectorStoreId: string, fileId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling getVectorStoreFile.');
        }

        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling getVectorStoreFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VectorStoreFileObject>('get',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/files/${encodeURIComponent(String(fileId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch being retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreFileBatchObject>;
    public getVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreFileBatchObject>>;
    public getVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreFileBatchObject>>;
    public getVectorStoreFileBatch(vectorStoreId: string, batchId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling getVectorStoreFileBatch.');
        }

        if (batchId === null || batchId === undefined) {
            throw new Error('Required parameter batchId was null or undefined when calling getVectorStoreFileBatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VectorStoreFileBatchObject>('get',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/file_batches/${encodeURIComponent(String(batchId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param batchId The ID of the file batch that the files belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFilesInVectorStoreBatch(vectorStoreId: string, batchId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<ListVectorStoreFilesResponse>;
    public listFilesInVectorStoreBatch(vectorStoreId: string, batchId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListVectorStoreFilesResponse>>;
    public listFilesInVectorStoreBatch(vectorStoreId: string, batchId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListVectorStoreFilesResponse>>;
    public listFilesInVectorStoreBatch(vectorStoreId: string, batchId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling listFilesInVectorStoreBatch.');
        }

        if (batchId === null || batchId === undefined) {
            throw new Error('Required parameter batchId was null or undefined when calling listFilesInVectorStoreBatch.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListVectorStoreFilesResponse>('get',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/file_batches/${encodeURIComponent(String(batchId))}/files`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVectorStoreFiles(vectorStoreId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<ListVectorStoreFilesResponse>;
    public listVectorStoreFiles(vectorStoreId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListVectorStoreFilesResponse>>;
    public listVectorStoreFiles(vectorStoreId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListVectorStoreFilesResponse>>;
    public listVectorStoreFiles(vectorStoreId: string, limit?: number, order?: string, after?: string, before?: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling listVectorStoreFiles.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListVectorStoreFilesResponse>('get',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}/files`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of vector stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVectorStores(limit?: number, order?: string, after?: string, before?: string, observe?: 'body', reportProgress?: boolean): Observable<ListVectorStoresResponse>;
    public listVectorStores(limit?: number, order?: string, after?: string, before?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListVectorStoresResponse>>;
    public listVectorStores(limit?: number, order?: string, after?: string, before?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListVectorStoresResponse>>;
    public listVectorStores(limit?: number, order?: string, after?: string, before?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ListVectorStoresResponse>('get',`${this.basePath}/vector_stores`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies a vector store.
     * 
     * @param body 
     * @param vectorStoreId The ID of the vector store to modify.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyVectorStore(body: UpdateVectorStoreRequest, vectorStoreId: string, observe?: 'body', reportProgress?: boolean): Observable<VectorStoreObject>;
    public modifyVectorStore(body: UpdateVectorStoreRequest, vectorStoreId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VectorStoreObject>>;
    public modifyVectorStore(body: UpdateVectorStoreRequest, vectorStoreId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VectorStoreObject>>;
    public modifyVectorStore(body: UpdateVectorStoreRequest, vectorStoreId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling modifyVectorStore.');
        }

        if (vectorStoreId === null || vectorStoreId === undefined) {
            throw new Error('Required parameter vectorStoreId was null or undefined when calling modifyVectorStore.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<VectorStoreObject>('post',`${this.basePath}/vector_stores/${encodeURIComponent(String(vectorStoreId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

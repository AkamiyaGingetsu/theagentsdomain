# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssistantsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_run(self, thread_id, run_id, **kwargs):  # noqa: E501
        """Cancels a run that is `in_progress`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_run(thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to which this run belongs. (required)
        :param str run_id: The ID of the run to cancel. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_run_with_http_info(thread_id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_run_with_http_info(thread_id, run_id, **kwargs)  # noqa: E501
            return data

    def cancel_run_with_http_info(self, thread_id, run_id, **kwargs):  # noqa: E501
        """Cancels a run that is `in_progress`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_run_with_http_info(thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to which this run belongs. (required)
        :param str run_id: The ID of the run to cancel. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `cancel_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `cancel_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs/{run_id}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_assistant(self, body, **kwargs):  # noqa: E501
        """Create an assistant with a model and instructions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assistant(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAssistantRequest body: (required)
        :return: AssistantObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assistant_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assistant_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_assistant_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an assistant with a model and instructions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assistant_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAssistantRequest body: (required)
        :return: AssistantObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assistants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssistantObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_message(self, body, thread_id, **kwargs):  # noqa: E501
        """Create a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_message(body, thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateMessageRequest body: (required)
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
        :return: MessageObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_message_with_http_info(body, thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_message_with_http_info(body, thread_id, **kwargs)  # noqa: E501
            return data

    def create_message_with_http_info(self, body, thread_id, **kwargs):  # noqa: E501
        """Create a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_message_with_http_info(body, thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateMessageRequest body: (required)
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
        :return: MessageObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'thread_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_message`")  # noqa: E501
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `create_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/messages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_run(self, body, thread_id, **kwargs):  # noqa: E501
        """Create a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_run(body, thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRunRequest body: (required)
        :param str thread_id: The ID of the thread to run. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_run_with_http_info(body, thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_run_with_http_info(body, thread_id, **kwargs)  # noqa: E501
            return data

    def create_run_with_http_info(self, body, thread_id, **kwargs):  # noqa: E501
        """Create a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_run_with_http_info(body, thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRunRequest body: (required)
        :param str thread_id: The ID of the thread to run. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'thread_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_run`")  # noqa: E501
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `create_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_thread(self, **kwargs):  # noqa: E501
        """Create a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thread(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateThreadRequest body:
        :return: ThreadObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_thread_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_thread_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_thread_with_http_info(self, **kwargs):  # noqa: E501
        """Create a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thread_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateThreadRequest body:
        :return: ThreadObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_thread" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreadObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_thread_and_run(self, body, **kwargs):  # noqa: E501
        """Create a thread and run it in one request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thread_and_run(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateThreadAndRunRequest body: (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_thread_and_run_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_thread_and_run_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_thread_and_run_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a thread and run it in one request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thread_and_run_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateThreadAndRunRequest body: (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_thread_and_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_thread_and_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assistant(self, assistant_id, **kwargs):  # noqa: E501
        """Delete an assistant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assistant(assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: The ID of the assistant to delete. (required)
        :return: DeleteAssistantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assistant_with_http_info(assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_assistant_with_http_info(assistant_id, **kwargs)  # noqa: E501
            return data

    def delete_assistant_with_http_info(self, assistant_id, **kwargs):  # noqa: E501
        """Delete an assistant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assistant_with_http_info(assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: The ID of the assistant to delete. (required)
        :return: DeleteAssistantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assistant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `delete_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistant_id'] = params['assistant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assistants/{assistant_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteAssistantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_message(self, thread_id, message_id, **kwargs):  # noqa: E501
        """Deletes a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message(thread_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to which this message belongs. (required)
        :param str message_id: The ID of the message to delete. (required)
        :return: DeleteMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_message_with_http_info(thread_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_message_with_http_info(thread_id, message_id, **kwargs)  # noqa: E501
            return data

    def delete_message_with_http_info(self, thread_id, message_id, **kwargs):  # noqa: E501
        """Deletes a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_with_http_info(thread_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to which this message belongs. (required)
        :param str message_id: The ID of the message to delete. (required)
        :return: DeleteMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `delete_message`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `delete_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'message_id' in params:
            path_params['message_id'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/messages/{message_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_thread(self, thread_id, **kwargs):  # noqa: E501
        """Delete a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_thread(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to delete. (required)
        :return: DeleteThreadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_thread_with_http_info(thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_thread_with_http_info(thread_id, **kwargs)  # noqa: E501
            return data

    def delete_thread_with_http_info(self, thread_id, **kwargs):  # noqa: E501
        """Delete a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_thread_with_http_info(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to delete. (required)
        :return: DeleteThreadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_thread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `delete_thread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteThreadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assistant(self, assistant_id, **kwargs):  # noqa: E501
        """Retrieves an assistant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assistant(assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: The ID of the assistant to retrieve. (required)
        :return: AssistantObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assistant_with_http_info(assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assistant_with_http_info(assistant_id, **kwargs)  # noqa: E501
            return data

    def get_assistant_with_http_info(self, assistant_id, **kwargs):  # noqa: E501
        """Retrieves an assistant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assistant_with_http_info(assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: The ID of the assistant to retrieve. (required)
        :return: AssistantObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assistant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `get_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistant_id'] = params['assistant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assistants/{assistant_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssistantObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message(self, thread_id, message_id, **kwargs):  # noqa: E501
        """Retrieve a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message(thread_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
        :param str message_id: The ID of the message to retrieve. (required)
        :return: MessageObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_with_http_info(thread_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_message_with_http_info(thread_id, message_id, **kwargs)  # noqa: E501
            return data

    def get_message_with_http_info(self, thread_id, message_id, **kwargs):  # noqa: E501
        """Retrieve a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_with_http_info(thread_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
        :param str message_id: The ID of the message to retrieve. (required)
        :return: MessageObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `get_message`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `get_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'message_id' in params:
            path_params['message_id'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/messages/{message_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_run(self, thread_id, run_id, **kwargs):  # noqa: E501
        """Retrieves a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run(thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) that was run. (required)
        :param str run_id: The ID of the run to retrieve. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_run_with_http_info(thread_id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_run_with_http_info(thread_id, run_id, **kwargs)  # noqa: E501
            return data

    def get_run_with_http_info(self, thread_id, run_id, **kwargs):  # noqa: E501
        """Retrieves a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_with_http_info(thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) that was run. (required)
        :param str run_id: The ID of the run to retrieve. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `get_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs/{run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_run_step(self, thread_id, run_id, step_id, **kwargs):  # noqa: E501
        """Retrieves a run step.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_step(thread_id, run_id, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to which the run and run step belongs. (required)
        :param str run_id: The ID of the run to which the run step belongs. (required)
        :param str step_id: The ID of the run step to retrieve. (required)
        :return: RunStepObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_run_step_with_http_info(thread_id, run_id, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_run_step_with_http_info(thread_id, run_id, step_id, **kwargs)  # noqa: E501
            return data

    def get_run_step_with_http_info(self, thread_id, run_id, step_id, **kwargs):  # noqa: E501
        """Retrieves a run step.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_step_with_http_info(thread_id, run_id, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to which the run and run step belongs. (required)
        :param str run_id: The ID of the run to which the run step belongs. (required)
        :param str step_id: The ID of the run step to retrieve. (required)
        :return: RunStepObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'run_id', 'step_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `get_run_step`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_run_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_run_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501
        if 'step_id' in params:
            path_params['step_id'] = params['step_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs/{run_id}/steps/{step_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunStepObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_thread(self, thread_id, **kwargs):  # noqa: E501
        """Retrieves a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_thread(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to retrieve. (required)
        :return: ThreadObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_thread_with_http_info(thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_thread_with_http_info(thread_id, **kwargs)  # noqa: E501
            return data

    def get_thread_with_http_info(self, thread_id, **kwargs):  # noqa: E501
        """Retrieves a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_thread_with_http_info(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread to retrieve. (required)
        :return: ThreadObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_thread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `get_thread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreadObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assistants(self, **kwargs):  # noqa: E501
        """Returns a list of assistants.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assistants(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListAssistantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assistants_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_assistants_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_assistants_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of assistants.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assistants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListAssistantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assistants" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assistants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAssistantsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_messages(self, thread_id, **kwargs):  # noqa: E501
        """Returns a list of messages for a given thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_messages(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :param str run_id: Filter messages by the run ID that generated them. 
        :return: ListMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_messages_with_http_info(thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_messages_with_http_info(thread_id, **kwargs)  # noqa: E501
            return data

    def list_messages_with_http_info(self, thread_id, **kwargs):  # noqa: E501
        """Returns a list of messages for a given thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_messages_with_http_info(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :param str run_id: Filter messages by the run ID that generated them. 
        :return: ListMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'limit', 'order', 'after', 'before', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `list_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMessagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_run_steps(self, thread_id, run_id, **kwargs):  # noqa: E501
        """Returns a list of run steps belonging to a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_steps(thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread the run and run steps belong to. (required)
        :param str run_id: The ID of the run the run steps belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListRunStepsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_run_steps_with_http_info(thread_id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_run_steps_with_http_info(thread_id, run_id, **kwargs)  # noqa: E501
            return data

    def list_run_steps_with_http_info(self, thread_id, run_id, **kwargs):  # noqa: E501
        """Returns a list of run steps belonging to a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_steps_with_http_info(thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread the run and run steps belong to. (required)
        :param str run_id: The ID of the run the run steps belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListRunStepsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'run_id', 'limit', 'order', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `list_run_steps`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `list_run_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs/{run_id}/steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListRunStepsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_runs(self, thread_id, **kwargs):  # noqa: E501
        """Returns a list of runs belonging to a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_runs(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread the run belongs to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_runs_with_http_info(thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_runs_with_http_info(thread_id, **kwargs)  # noqa: E501
            return data

    def list_runs_with_http_info(self, thread_id, **kwargs):  # noqa: E501
        """Returns a list of runs belonging to a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_runs_with_http_info(thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: The ID of the thread the run belongs to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'limit', 'order', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `list_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListRunsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_assistant(self, body, assistant_id, **kwargs):  # noqa: E501
        """Modifies an assistant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_assistant(body, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyAssistantRequest body: (required)
        :param str assistant_id: The ID of the assistant to modify. (required)
        :return: AssistantObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_assistant_with_http_info(body, assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_assistant_with_http_info(body, assistant_id, **kwargs)  # noqa: E501
            return data

    def modify_assistant_with_http_info(self, body, assistant_id, **kwargs):  # noqa: E501
        """Modifies an assistant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_assistant_with_http_info(body, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyAssistantRequest body: (required)
        :param str assistant_id: The ID of the assistant to modify. (required)
        :return: AssistantObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'assistant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_assistant`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `modify_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistant_id'] = params['assistant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assistants/{assistant_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssistantObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_message(self, body, thread_id, message_id, **kwargs):  # noqa: E501
        """Modifies a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_message(body, thread_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyMessageRequest body: (required)
        :param str thread_id: The ID of the thread to which this message belongs. (required)
        :param str message_id: The ID of the message to modify. (required)
        :return: MessageObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_message_with_http_info(body, thread_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_message_with_http_info(body, thread_id, message_id, **kwargs)  # noqa: E501
            return data

    def modify_message_with_http_info(self, body, thread_id, message_id, **kwargs):  # noqa: E501
        """Modifies a message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_message_with_http_info(body, thread_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyMessageRequest body: (required)
        :param str thread_id: The ID of the thread to which this message belongs. (required)
        :param str message_id: The ID of the message to modify. (required)
        :return: MessageObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'thread_id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_message`")  # noqa: E501
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `modify_message`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `modify_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'message_id' in params:
            path_params['message_id'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/messages/{message_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_run(self, body, thread_id, run_id, **kwargs):  # noqa: E501
        """Modifies a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_run(body, thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyRunRequest body: (required)
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) that was run. (required)
        :param str run_id: The ID of the run to modify. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_run_with_http_info(body, thread_id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_run_with_http_info(body, thread_id, run_id, **kwargs)  # noqa: E501
            return data

    def modify_run_with_http_info(self, body, thread_id, run_id, **kwargs):  # noqa: E501
        """Modifies a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_run_with_http_info(body, thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyRunRequest body: (required)
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) that was run. (required)
        :param str run_id: The ID of the run to modify. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'thread_id', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_run`")  # noqa: E501
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `modify_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `modify_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs/{run_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_thread(self, body, thread_id, **kwargs):  # noqa: E501
        """Modifies a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_thread(body, thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyThreadRequest body: (required)
        :param str thread_id: The ID of the thread to modify. Only the `metadata` can be modified. (required)
        :return: ThreadObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_thread_with_http_info(body, thread_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_thread_with_http_info(body, thread_id, **kwargs)  # noqa: E501
            return data

    def modify_thread_with_http_info(self, body, thread_id, **kwargs):  # noqa: E501
        """Modifies a thread.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_thread_with_http_info(body, thread_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyThreadRequest body: (required)
        :param str thread_id: The ID of the thread to modify. Only the `metadata` can be modified. (required)
        :return: ThreadObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'thread_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_thread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_thread`")  # noqa: E501
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `modify_thread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreadObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_tool_ouputs_to_run(self, body, thread_id, run_id, **kwargs):  # noqa: E501
        """When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_tool_ouputs_to_run(body, thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmitToolOutputsRunRequest body: (required)
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
        :param str run_id: The ID of the run that requires the tool output submission. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_tool_ouputs_to_run_with_http_info(body, thread_id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_tool_ouputs_to_run_with_http_info(body, thread_id, run_id, **kwargs)  # noqa: E501
            return data

    def submit_tool_ouputs_to_run_with_http_info(self, body, thread_id, run_id, **kwargs):  # noqa: E501
        """When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_tool_ouputs_to_run_with_http_info(body, thread_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmitToolOutputsRunRequest body: (required)
        :param str thread_id: The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
        :param str run_id: The ID of the run that requires the tool output submission. (required)
        :return: RunObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'thread_id', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_tool_ouputs_to_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_tool_ouputs_to_run`")  # noqa: E501
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `submit_tool_ouputs_to_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `submit_tool_ouputs_to_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['thread_id'] = params['thread_id']  # noqa: E501
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

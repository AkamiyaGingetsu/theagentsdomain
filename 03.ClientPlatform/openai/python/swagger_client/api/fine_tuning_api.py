# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FineTuningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_fine_tuning_job(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """Immediately cancel a fine-tune job.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_fine_tuning_job(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job to cancel.  (required)
        :return: FineTuningJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_fine_tuning_job_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_fine_tuning_job_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
            return data

    def cancel_fine_tuning_job_with_http_info(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """Immediately cancel a fine-tune job.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_fine_tuning_job_with_http_info(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job to cancel.  (required)
        :return: FineTuningJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fine_tuning_job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_fine_tuning_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fine_tuning_job_id' is set
        if ('fine_tuning_job_id' not in params or
                params['fine_tuning_job_id'] is None):
            raise ValueError("Missing the required parameter `fine_tuning_job_id` when calling `cancel_fine_tuning_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fine_tuning_job_id' in params:
            path_params['fine_tuning_job_id'] = params['fine_tuning_job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fine_tuning/jobs/{fine_tuning_job_id}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FineTuningJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_fine_tuning_job(self, body, **kwargs):  # noqa: E501
        """Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_fine_tuning_job(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateFineTuningJobRequest body: (required)
        :return: FineTuningJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_fine_tuning_job_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_fine_tuning_job_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_fine_tuning_job_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_fine_tuning_job_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateFineTuningJobRequest body: (required)
        :return: FineTuningJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fine_tuning_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_fine_tuning_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fine_tuning/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FineTuningJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_fine_tuning_events(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """Get status updates for a fine-tuning job.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_fine_tuning_events(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job to get events for.  (required)
        :param str after: Identifier for the last event from the previous pagination request.
        :param int limit: Number of events to retrieve.
        :return: ListFineTuningJobEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_fine_tuning_events_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_fine_tuning_events_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
            return data

    def list_fine_tuning_events_with_http_info(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """Get status updates for a fine-tuning job.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_fine_tuning_events_with_http_info(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job to get events for.  (required)
        :param str after: Identifier for the last event from the previous pagination request.
        :param int limit: Number of events to retrieve.
        :return: ListFineTuningJobEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fine_tuning_job_id', 'after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_fine_tuning_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fine_tuning_job_id' is set
        if ('fine_tuning_job_id' not in params or
                params['fine_tuning_job_id'] is None):
            raise ValueError("Missing the required parameter `fine_tuning_job_id` when calling `list_fine_tuning_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fine_tuning_job_id' in params:
            path_params['fine_tuning_job_id'] = params['fine_tuning_job_id']  # noqa: E501

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fine_tuning/jobs/{fine_tuning_job_id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListFineTuningJobEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_fine_tuning_job_checkpoints(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """List checkpoints for a fine-tuning job.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_fine_tuning_job_checkpoints(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job to get checkpoints for.  (required)
        :param str after: Identifier for the last checkpoint ID from the previous pagination request.
        :param int limit: Number of checkpoints to retrieve.
        :return: ListFineTuningJobCheckpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_fine_tuning_job_checkpoints_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_fine_tuning_job_checkpoints_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
            return data

    def list_fine_tuning_job_checkpoints_with_http_info(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """List checkpoints for a fine-tuning job.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_fine_tuning_job_checkpoints_with_http_info(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job to get checkpoints for.  (required)
        :param str after: Identifier for the last checkpoint ID from the previous pagination request.
        :param int limit: Number of checkpoints to retrieve.
        :return: ListFineTuningJobCheckpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fine_tuning_job_id', 'after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_fine_tuning_job_checkpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fine_tuning_job_id' is set
        if ('fine_tuning_job_id' not in params or
                params['fine_tuning_job_id'] is None):
            raise ValueError("Missing the required parameter `fine_tuning_job_id` when calling `list_fine_tuning_job_checkpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fine_tuning_job_id' in params:
            path_params['fine_tuning_job_id'] = params['fine_tuning_job_id']  # noqa: E501

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListFineTuningJobCheckpointsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_paginated_fine_tuning_jobs(self, **kwargs):  # noqa: E501
        """List your organization's fine-tuning jobs   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_paginated_fine_tuning_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str after: Identifier for the last job from the previous pagination request.
        :param int limit: Number of fine-tuning jobs to retrieve.
        :return: ListPaginatedFineTuningJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_paginated_fine_tuning_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_paginated_fine_tuning_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_paginated_fine_tuning_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """List your organization's fine-tuning jobs   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_paginated_fine_tuning_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str after: Identifier for the last job from the previous pagination request.
        :param int limit: Number of fine-tuning jobs to retrieve.
        :return: ListPaginatedFineTuningJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_paginated_fine_tuning_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fine_tuning/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListPaginatedFineTuningJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_fine_tuning_job(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_fine_tuning_job(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job.  (required)
        :return: FineTuningJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_fine_tuning_job_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_fine_tuning_job_with_http_info(fine_tuning_job_id, **kwargs)  # noqa: E501
            return data

    def retrieve_fine_tuning_job_with_http_info(self, fine_tuning_job_id, **kwargs):  # noqa: E501
        """Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_fine_tuning_job_with_http_info(fine_tuning_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fine_tuning_job_id: The ID of the fine-tuning job.  (required)
        :return: FineTuningJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fine_tuning_job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_fine_tuning_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fine_tuning_job_id' is set
        if ('fine_tuning_job_id' not in params or
                params['fine_tuning_job_id'] is None):
            raise ValueError("Missing the required parameter `fine_tuning_job_id` when calling `retrieve_fine_tuning_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fine_tuning_job_id' in params:
            path_params['fine_tuning_job_id'] = params['fine_tuning_job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fine_tuning/jobs/{fine_tuning_job_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FineTuningJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

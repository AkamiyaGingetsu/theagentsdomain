# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VectorStoresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_vector_store_file_batch(self, vector_store_id, batch_id, **kwargs):  # noqa: E501
        """Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_vector_store_file_batch(vector_store_id, batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file batch belongs to. (required)
        :param str batch_id: The ID of the file batch to cancel. (required)
        :return: VectorStoreFileBatchObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_vector_store_file_batch_with_http_info(vector_store_id, batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_vector_store_file_batch_with_http_info(vector_store_id, batch_id, **kwargs)  # noqa: E501
            return data

    def cancel_vector_store_file_batch_with_http_info(self, vector_store_id, batch_id, **kwargs):  # noqa: E501
        """Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_vector_store_file_batch_with_http_info(vector_store_id, batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file batch belongs to. (required)
        :param str batch_id: The ID of the file batch to cancel. (required)
        :return: VectorStoreFileBatchObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id', 'batch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_vector_store_file_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `cancel_vector_store_file_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `cancel_vector_store_file_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501
        if 'batch_id' in params:
            path_params['batch_id'] = params['batch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreFileBatchObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vector_store(self, body, **kwargs):  # noqa: E501
        """Create a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vector_store(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVectorStoreRequest body: (required)
        :return: VectorStoreObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vector_store_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vector_store_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_vector_store_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vector_store_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVectorStoreRequest body: (required)
        :return: VectorStoreObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vector_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_vector_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vector_store_file(self, body, vector_store_id, **kwargs):  # noqa: E501
        """Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vector_store_file(body, vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVectorStoreFileRequest body: (required)
        :param str vector_store_id: The ID of the vector store for which to create a File.  (required)
        :return: VectorStoreFileObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vector_store_file_with_http_info(body, vector_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vector_store_file_with_http_info(body, vector_store_id, **kwargs)  # noqa: E501
            return data

    def create_vector_store_file_with_http_info(self, body, vector_store_id, **kwargs):  # noqa: E501
        """Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vector_store_file_with_http_info(body, vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVectorStoreFileRequest body: (required)
        :param str vector_store_id: The ID of the vector store for which to create a File.  (required)
        :return: VectorStoreFileObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'vector_store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vector_store_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_vector_store_file`")  # noqa: E501
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `create_vector_store_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreFileObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vector_store_file_batch(self, body, vector_store_id, **kwargs):  # noqa: E501
        """Create a vector store file batch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vector_store_file_batch(body, vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVectorStoreFileBatchRequest body: (required)
        :param str vector_store_id: The ID of the vector store for which to create a File Batch.  (required)
        :return: VectorStoreFileBatchObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vector_store_file_batch_with_http_info(body, vector_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vector_store_file_batch_with_http_info(body, vector_store_id, **kwargs)  # noqa: E501
            return data

    def create_vector_store_file_batch_with_http_info(self, body, vector_store_id, **kwargs):  # noqa: E501
        """Create a vector store file batch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vector_store_file_batch_with_http_info(body, vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVectorStoreFileBatchRequest body: (required)
        :param str vector_store_id: The ID of the vector store for which to create a File Batch.  (required)
        :return: VectorStoreFileBatchObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'vector_store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vector_store_file_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_vector_store_file_batch`")  # noqa: E501
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `create_vector_store_file_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/file_batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreFileBatchObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vector_store(self, vector_store_id, **kwargs):  # noqa: E501
        """Delete a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vector_store(vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store to delete. (required)
        :return: DeleteVectorStoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vector_store_with_http_info(vector_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vector_store_with_http_info(vector_store_id, **kwargs)  # noqa: E501
            return data

    def delete_vector_store_with_http_info(self, vector_store_id, **kwargs):  # noqa: E501
        """Delete a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vector_store_with_http_info(vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store to delete. (required)
        :return: DeleteVectorStoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vector_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `delete_vector_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteVectorStoreResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vector_store_file(self, vector_store_id, file_id, **kwargs):  # noqa: E501
        """Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vector_store_file(vector_store_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file belongs to. (required)
        :param str file_id: The ID of the file to delete. (required)
        :return: DeleteVectorStoreFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vector_store_file_with_http_info(vector_store_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vector_store_file_with_http_info(vector_store_id, file_id, **kwargs)  # noqa: E501
            return data

    def delete_vector_store_file_with_http_info(self, vector_store_id, file_id, **kwargs):  # noqa: E501
        """Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vector_store_file_with_http_info(vector_store_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file belongs to. (required)
        :param str file_id: The ID of the file to delete. (required)
        :return: DeleteVectorStoreFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vector_store_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `delete_vector_store_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `delete_vector_store_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/files/{file_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteVectorStoreFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vector_store(self, vector_store_id, **kwargs):  # noqa: E501
        """Retrieves a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vector_store(vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store to retrieve. (required)
        :return: VectorStoreObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vector_store_with_http_info(vector_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vector_store_with_http_info(vector_store_id, **kwargs)  # noqa: E501
            return data

    def get_vector_store_with_http_info(self, vector_store_id, **kwargs):  # noqa: E501
        """Retrieves a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vector_store_with_http_info(vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store to retrieve. (required)
        :return: VectorStoreObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vector_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `get_vector_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vector_store_file(self, vector_store_id, file_id, **kwargs):  # noqa: E501
        """Retrieves a vector store file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vector_store_file(vector_store_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file belongs to. (required)
        :param str file_id: The ID of the file being retrieved. (required)
        :return: VectorStoreFileObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vector_store_file_with_http_info(vector_store_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vector_store_file_with_http_info(vector_store_id, file_id, **kwargs)  # noqa: E501
            return data

    def get_vector_store_file_with_http_info(self, vector_store_id, file_id, **kwargs):  # noqa: E501
        """Retrieves a vector store file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vector_store_file_with_http_info(vector_store_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file belongs to. (required)
        :param str file_id: The ID of the file being retrieved. (required)
        :return: VectorStoreFileObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vector_store_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `get_vector_store_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `get_vector_store_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreFileObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vector_store_file_batch(self, vector_store_id, batch_id, **kwargs):  # noqa: E501
        """Retrieves a vector store file batch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vector_store_file_batch(vector_store_id, batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file batch belongs to. (required)
        :param str batch_id: The ID of the file batch being retrieved. (required)
        :return: VectorStoreFileBatchObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vector_store_file_batch_with_http_info(vector_store_id, batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vector_store_file_batch_with_http_info(vector_store_id, batch_id, **kwargs)  # noqa: E501
            return data

    def get_vector_store_file_batch_with_http_info(self, vector_store_id, batch_id, **kwargs):  # noqa: E501
        """Retrieves a vector store file batch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vector_store_file_batch_with_http_info(vector_store_id, batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the file batch belongs to. (required)
        :param str batch_id: The ID of the file batch being retrieved. (required)
        :return: VectorStoreFileBatchObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id', 'batch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vector_store_file_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `get_vector_store_file_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `get_vector_store_file_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501
        if 'batch_id' in params:
            path_params['batch_id'] = params['batch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/file_batches/{batch_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreFileBatchObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_files_in_vector_store_batch(self, vector_store_id, batch_id, **kwargs):  # noqa: E501
        """Returns a list of vector store files in a batch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_files_in_vector_store_batch(vector_store_id, batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the files belong to. (required)
        :param str batch_id: The ID of the file batch that the files belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :param str filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
        :return: ListVectorStoreFilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_files_in_vector_store_batch_with_http_info(vector_store_id, batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_files_in_vector_store_batch_with_http_info(vector_store_id, batch_id, **kwargs)  # noqa: E501
            return data

    def list_files_in_vector_store_batch_with_http_info(self, vector_store_id, batch_id, **kwargs):  # noqa: E501
        """Returns a list of vector store files in a batch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_files_in_vector_store_batch_with_http_info(vector_store_id, batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the files belong to. (required)
        :param str batch_id: The ID of the file batch that the files belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :param str filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
        :return: ListVectorStoreFilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id', 'batch_id', 'limit', 'order', 'after', 'before', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_files_in_vector_store_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `list_files_in_vector_store_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `list_files_in_vector_store_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501
        if 'batch_id' in params:
            path_params['batch_id'] = params['batch_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/file_batches/{batch_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListVectorStoreFilesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_vector_store_files(self, vector_store_id, **kwargs):  # noqa: E501
        """Returns a list of vector store files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_vector_store_files(vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the files belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :param str filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
        :return: ListVectorStoreFilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_vector_store_files_with_http_info(vector_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_vector_store_files_with_http_info(vector_store_id, **kwargs)  # noqa: E501
            return data

    def list_vector_store_files_with_http_info(self, vector_store_id, **kwargs):  # noqa: E501
        """Returns a list of vector store files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_vector_store_files_with_http_info(vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vector_store_id: The ID of the vector store that the files belong to. (required)
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :param str filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
        :return: ListVectorStoreFilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vector_store_id', 'limit', 'order', 'after', 'before', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vector_store_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `list_vector_store_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListVectorStoreFilesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_vector_stores(self, **kwargs):  # noqa: E501
        """Returns a list of vector stores.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_vector_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListVectorStoresResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_vector_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_vector_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_vector_stores_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of vector stores.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_vector_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
        :param str order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
        :param str after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
        :param str before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
        :return: ListVectorStoresResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vector_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListVectorStoresResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_vector_store(self, body, vector_store_id, **kwargs):  # noqa: E501
        """Modifies a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_vector_store(body, vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVectorStoreRequest body: (required)
        :param str vector_store_id: The ID of the vector store to modify. (required)
        :return: VectorStoreObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_vector_store_with_http_info(body, vector_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_vector_store_with_http_info(body, vector_store_id, **kwargs)  # noqa: E501
            return data

    def modify_vector_store_with_http_info(self, body, vector_store_id, **kwargs):  # noqa: E501
        """Modifies a vector store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_vector_store_with_http_info(body, vector_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVectorStoreRequest body: (required)
        :param str vector_store_id: The ID of the vector store to modify. (required)
        :return: VectorStoreObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'vector_store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_vector_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_vector_store`")  # noqa: E501
        # verify the required parameter 'vector_store_id' is set
        if ('vector_store_id' not in params or
                params['vector_store_id'] is None):
            raise ValueError("Missing the required parameter `vector_store_id` when calling `modify_vector_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vector_store_id' in params:
            path_params['vector_store_id'] = params['vector_store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vector_stores/{vector_store_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VectorStoreObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

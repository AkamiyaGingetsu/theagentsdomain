# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_image(self, body, **kwargs):  # noqa: E501
        """Creates an image given a prompt.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateImageRequest body: (required)
        :return: ImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_image_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an image given a prompt.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateImageRequest body: (required)
        :return: ImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/generations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_image_edit(self, image, prompt, mask, model, n, size, response_format, user, **kwargs):  # noqa: E501
        """Creates an edited or extended image given an original image and a prompt.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_image_edit(image, prompt, mask, model, n, size, response_format, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: (required)
        :param str prompt: (required)
        :param str mask: (required)
        :param object model: (required)
        :param int n: (required)
        :param str size: (required)
        :param str response_format: (required)
        :param str user: (required)
        :return: ImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_image_edit_with_http_info(image, prompt, mask, model, n, size, response_format, user, **kwargs)  # noqa: E501
        else:
            (data) = self.create_image_edit_with_http_info(image, prompt, mask, model, n, size, response_format, user, **kwargs)  # noqa: E501
            return data

    def create_image_edit_with_http_info(self, image, prompt, mask, model, n, size, response_format, user, **kwargs):  # noqa: E501
        """Creates an edited or extended image given an original image and a prompt.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_image_edit_with_http_info(image, prompt, mask, model, n, size, response_format, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: (required)
        :param str prompt: (required)
        :param str mask: (required)
        :param object model: (required)
        :param int n: (required)
        :param str size: (required)
        :param str response_format: (required)
        :param str user: (required)
        :return: ImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'prompt', 'mask', 'model', 'n', 'size', 'response_format', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_image_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'prompt' is set
        if ('prompt' not in params or
                params['prompt'] is None):
            raise ValueError("Missing the required parameter `prompt` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'mask' is set
        if ('mask' not in params or
                params['mask'] is None):
            raise ValueError("Missing the required parameter `mask` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'n' is set
        if ('n' not in params or
                params['n'] is None):
            raise ValueError("Missing the required parameter `n` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'response_format' is set
        if ('response_format' not in params or
                params['response_format'] is None):
            raise ValueError("Missing the required parameter `response_format` when calling `create_image_edit`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_image_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501
        if 'prompt' in params:
            form_params.append(('prompt', params['prompt']))  # noqa: E501
        if 'mask' in params:
            local_var_files['mask'] = params['mask']  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'n' in params:
            form_params.append(('n', params['n']))  # noqa: E501
        if 'size' in params:
            form_params.append(('size', params['size']))  # noqa: E501
        if 'response_format' in params:
            form_params.append(('response_format', params['response_format']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/edits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_image_variation(self, image, model, n, response_format, size, user, **kwargs):  # noqa: E501
        """Creates a variation of a given image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_image_variation(image, model, n, response_format, size, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: (required)
        :param object model: (required)
        :param int n: (required)
        :param str response_format: (required)
        :param str size: (required)
        :param str user: (required)
        :return: ImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_image_variation_with_http_info(image, model, n, response_format, size, user, **kwargs)  # noqa: E501
        else:
            (data) = self.create_image_variation_with_http_info(image, model, n, response_format, size, user, **kwargs)  # noqa: E501
            return data

    def create_image_variation_with_http_info(self, image, model, n, response_format, size, user, **kwargs):  # noqa: E501
        """Creates a variation of a given image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_image_variation_with_http_info(image, model, n, response_format, size, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: (required)
        :param object model: (required)
        :param int n: (required)
        :param str response_format: (required)
        :param str size: (required)
        :param str user: (required)
        :return: ImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'model', 'n', 'response_format', 'size', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_image_variation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `create_image_variation`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_image_variation`")  # noqa: E501
        # verify the required parameter 'n' is set
        if ('n' not in params or
                params['n'] is None):
            raise ValueError("Missing the required parameter `n` when calling `create_image_variation`")  # noqa: E501
        # verify the required parameter 'response_format' is set
        if ('response_format' not in params or
                params['response_format'] is None):
            raise ValueError("Missing the required parameter `response_format` when calling `create_image_variation`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `create_image_variation`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_image_variation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'n' in params:
            form_params.append(('n', params['n']))  # noqa: E501
        if 'response_format' in params:
            form_params.append(('response_format', params['response_format']))  # noqa: E501
        if 'size' in params:
            form_params.append(('size', params['size']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/variations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

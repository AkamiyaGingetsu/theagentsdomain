# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AudioApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_speech(self, body, **kwargs):  # noqa: E501
        """Generates audio from the input text.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_speech(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSpeechRequest body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_speech_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_speech_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_speech_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generates audio from the input text.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_speech_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSpeechRequest body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_speech" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_speech`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audio/speech', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_transcription(self, file, model, language, prompt, response_format, temperature, timestamp_granularities, **kwargs):  # noqa: E501
        """Transcribes audio into the input language.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transcription(file, model, language, prompt, response_format, temperature, timestamp_granularities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param object model: (required)
        :param str language: (required)
        :param str prompt: (required)
        :param str response_format: (required)
        :param float temperature: (required)
        :param list[str] timestamp_granularities: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_transcription_with_http_info(file, model, language, prompt, response_format, temperature, timestamp_granularities, **kwargs)  # noqa: E501
        else:
            (data) = self.create_transcription_with_http_info(file, model, language, prompt, response_format, temperature, timestamp_granularities, **kwargs)  # noqa: E501
            return data

    def create_transcription_with_http_info(self, file, model, language, prompt, response_format, temperature, timestamp_granularities, **kwargs):  # noqa: E501
        """Transcribes audio into the input language.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transcription_with_http_info(file, model, language, prompt, response_format, temperature, timestamp_granularities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param object model: (required)
        :param str language: (required)
        :param str prompt: (required)
        :param str response_format: (required)
        :param float temperature: (required)
        :param list[str] timestamp_granularities: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'model', 'language', 'prompt', 'response_format', 'temperature', 'timestamp_granularities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transcription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `create_transcription`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_transcription`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `create_transcription`")  # noqa: E501
        # verify the required parameter 'prompt' is set
        if ('prompt' not in params or
                params['prompt'] is None):
            raise ValueError("Missing the required parameter `prompt` when calling `create_transcription`")  # noqa: E501
        # verify the required parameter 'response_format' is set
        if ('response_format' not in params or
                params['response_format'] is None):
            raise ValueError("Missing the required parameter `response_format` when calling `create_transcription`")  # noqa: E501
        # verify the required parameter 'temperature' is set
        if ('temperature' not in params or
                params['temperature'] is None):
            raise ValueError("Missing the required parameter `temperature` when calling `create_transcription`")  # noqa: E501
        # verify the required parameter 'timestamp_granularities' is set
        if ('timestamp_granularities' not in params or
                params['timestamp_granularities'] is None):
            raise ValueError("Missing the required parameter `timestamp_granularities` when calling `create_transcription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'language' in params:
            form_params.append(('language', params['language']))  # noqa: E501
        if 'prompt' in params:
            form_params.append(('prompt', params['prompt']))  # noqa: E501
        if 'response_format' in params:
            form_params.append(('response_format', params['response_format']))  # noqa: E501
        if 'temperature' in params:
            form_params.append(('temperature', params['temperature']))  # noqa: E501
        if 'timestamp_granularities' in params:
            form_params.append(('timestamp_granularities[]', params['timestamp_granularities']))  # noqa: E501
            collection_formats['timestamp_granularities[]'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audio/transcriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_translation(self, file, model, prompt, response_format, temperature, **kwargs):  # noqa: E501
        """Translates audio into English.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_translation(file, model, prompt, response_format, temperature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param object model: (required)
        :param str prompt: (required)
        :param str response_format: (required)
        :param float temperature: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_translation_with_http_info(file, model, prompt, response_format, temperature, **kwargs)  # noqa: E501
        else:
            (data) = self.create_translation_with_http_info(file, model, prompt, response_format, temperature, **kwargs)  # noqa: E501
            return data

    def create_translation_with_http_info(self, file, model, prompt, response_format, temperature, **kwargs):  # noqa: E501
        """Translates audio into English.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_translation_with_http_info(file, model, prompt, response_format, temperature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param object model: (required)
        :param str prompt: (required)
        :param str response_format: (required)
        :param float temperature: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'model', 'prompt', 'response_format', 'temperature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'prompt' is set
        if ('prompt' not in params or
                params['prompt'] is None):
            raise ValueError("Missing the required parameter `prompt` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'response_format' is set
        if ('response_format' not in params or
                params['response_format'] is None):
            raise ValueError("Missing the required parameter `response_format` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'temperature' is set
        if ('temperature' not in params or
                params['temperature'] is None):
            raise ValueError("Missing the required parameter `temperature` when calling `create_translation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'prompt' in params:
            form_params.append(('prompt', params['prompt']))  # noqa: E501
        if 'response_format' in params:
            form_params.append(('response_format', params['response_format']))  # noqa: E501
        if 'temperature' in params:
            form_params.append(('temperature', params['temperature']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audio/translations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

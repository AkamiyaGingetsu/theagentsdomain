# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateEmbeddingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input': 'OneOfCreateEmbeddingRequestInput',
        'model': 'AnyOfCreateEmbeddingRequestModel',
        'encoding_format': 'str',
        'dimensions': 'int',
        'user': 'str'
    }

    attribute_map = {
        'input': 'input',
        'model': 'model',
        'encoding_format': 'encoding_format',
        'dimensions': 'dimensions',
        'user': 'user'
    }

    def __init__(self, input=None, model=None, encoding_format='float', dimensions=None, user=None):  # noqa: E501
        """CreateEmbeddingRequest - a model defined in Swagger"""  # noqa: E501
        self._input = None
        self._model = None
        self._encoding_format = None
        self._dimensions = None
        self._user = None
        self.discriminator = None
        self.input = input
        self.model = model
        if encoding_format is not None:
            self.encoding_format = encoding_format
        if dimensions is not None:
            self.dimensions = dimensions
        if user is not None:
            self.user = user

    @property
    def input(self):
        """Gets the input of this CreateEmbeddingRequest.  # noqa: E501

        Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.   # noqa: E501

        :return: The input of this CreateEmbeddingRequest.  # noqa: E501
        :rtype: OneOfCreateEmbeddingRequestInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this CreateEmbeddingRequest.

        Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.   # noqa: E501

        :param input: The input of this CreateEmbeddingRequest.  # noqa: E501
        :type: OneOfCreateEmbeddingRequestInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def model(self):
        """Gets the model of this CreateEmbeddingRequest.  # noqa: E501

        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.   # noqa: E501

        :return: The model of this CreateEmbeddingRequest.  # noqa: E501
        :rtype: AnyOfCreateEmbeddingRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateEmbeddingRequest.

        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.   # noqa: E501

        :param model: The model of this CreateEmbeddingRequest.  # noqa: E501
        :type: AnyOfCreateEmbeddingRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def encoding_format(self):
        """Gets the encoding_format of this CreateEmbeddingRequest.  # noqa: E501

        The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).  # noqa: E501

        :return: The encoding_format of this CreateEmbeddingRequest.  # noqa: E501
        :rtype: str
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format):
        """Sets the encoding_format of this CreateEmbeddingRequest.

        The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).  # noqa: E501

        :param encoding_format: The encoding_format of this CreateEmbeddingRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["float", "base64"]  # noqa: E501
        if encoding_format not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_format` ({0}), must be one of {1}"  # noqa: E501
                .format(encoding_format, allowed_values)
            )

        self._encoding_format = encoding_format

    @property
    def dimensions(self):
        """Gets the dimensions of this CreateEmbeddingRequest.  # noqa: E501

        The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.   # noqa: E501

        :return: The dimensions of this CreateEmbeddingRequest.  # noqa: E501
        :rtype: int
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CreateEmbeddingRequest.

        The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.   # noqa: E501

        :param dimensions: The dimensions of this CreateEmbeddingRequest.  # noqa: E501
        :type: int
        """

        self._dimensions = dimensions

    @property
    def user(self):
        """Gets the user of this CreateEmbeddingRequest.  # noqa: E501

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :return: The user of this CreateEmbeddingRequest.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateEmbeddingRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :param user: The user of this CreateEmbeddingRequest.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateEmbeddingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateEmbeddingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

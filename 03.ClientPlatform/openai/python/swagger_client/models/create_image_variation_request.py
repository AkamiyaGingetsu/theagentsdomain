# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateImageVariationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'model': 'AnyOfCreateImageVariationRequestModel',
        'n': 'int',
        'response_format': 'str',
        'size': 'str',
        'user': 'str'
    }

    attribute_map = {
        'image': 'image',
        'model': 'model',
        'n': 'n',
        'response_format': 'response_format',
        'size': 'size',
        'user': 'user'
    }

    def __init__(self, image=None, model=None, n=1, response_format='url', size='1024x1024', user=None):  # noqa: E501
        """CreateImageVariationRequest - a model defined in Swagger"""  # noqa: E501
        self._image = None
        self._model = None
        self._n = None
        self._response_format = None
        self._size = None
        self._user = None
        self.discriminator = None
        self.image = image
        if model is not None:
            self.model = model
        if n is not None:
            self.n = n
        if response_format is not None:
            self.response_format = response_format
        if size is not None:
            self.size = size
        if user is not None:
            self.user = user

    @property
    def image(self):
        """Gets the image of this CreateImageVariationRequest.  # noqa: E501

        The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.  # noqa: E501

        :return: The image of this CreateImageVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CreateImageVariationRequest.

        The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.  # noqa: E501

        :param image: The image of this CreateImageVariationRequest.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def model(self):
        """Gets the model of this CreateImageVariationRequest.  # noqa: E501

        The model to use for image generation. Only `dall-e-2` is supported at this time.  # noqa: E501

        :return: The model of this CreateImageVariationRequest.  # noqa: E501
        :rtype: AnyOfCreateImageVariationRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateImageVariationRequest.

        The model to use for image generation. Only `dall-e-2` is supported at this time.  # noqa: E501

        :param model: The model of this CreateImageVariationRequest.  # noqa: E501
        :type: AnyOfCreateImageVariationRequestModel
        """

        self._model = model

    @property
    def n(self):
        """Gets the n of this CreateImageVariationRequest.  # noqa: E501

        The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.  # noqa: E501

        :return: The n of this CreateImageVariationRequest.  # noqa: E501
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this CreateImageVariationRequest.

        The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.  # noqa: E501

        :param n: The n of this CreateImageVariationRequest.  # noqa: E501
        :type: int
        """

        self._n = n

    @property
    def response_format(self):
        """Gets the response_format of this CreateImageVariationRequest.  # noqa: E501

        The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.  # noqa: E501

        :return: The response_format of this CreateImageVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """Sets the response_format of this CreateImageVariationRequest.

        The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.  # noqa: E501

        :param response_format: The response_format of this CreateImageVariationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["url", "b64_json"]  # noqa: E501
        if response_format not in allowed_values:
            raise ValueError(
                "Invalid value for `response_format` ({0}), must be one of {1}"  # noqa: E501
                .format(response_format, allowed_values)
            )

        self._response_format = response_format

    @property
    def size(self):
        """Gets the size of this CreateImageVariationRequest.  # noqa: E501

        The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.  # noqa: E501

        :return: The size of this CreateImageVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateImageVariationRequest.

        The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.  # noqa: E501

        :param size: The size of this CreateImageVariationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["256x256", "512x512", "1024x1024"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"  # noqa: E501
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def user(self):
        """Gets the user of this CreateImageVariationRequest.  # noqa: E501

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :return: The user of this CreateImageVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateImageVariationRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :param user: The user of this CreateImageVariationRequest.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateImageVariationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateImageVariationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

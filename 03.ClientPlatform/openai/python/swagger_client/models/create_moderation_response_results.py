# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateModerationResponseResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flagged': 'bool',
        'categories': 'CreateModerationResponseCategories',
        'category_scores': 'CreateModerationResponseCategoryScores'
    }

    attribute_map = {
        'flagged': 'flagged',
        'categories': 'categories',
        'category_scores': 'category_scores'
    }

    def __init__(self, flagged=None, categories=None, category_scores=None):  # noqa: E501
        """CreateModerationResponseResults - a model defined in Swagger"""  # noqa: E501
        self._flagged = None
        self._categories = None
        self._category_scores = None
        self.discriminator = None
        self.flagged = flagged
        self.categories = categories
        self.category_scores = category_scores

    @property
    def flagged(self):
        """Gets the flagged of this CreateModerationResponseResults.  # noqa: E501

        Whether any of the below categories are flagged.  # noqa: E501

        :return: The flagged of this CreateModerationResponseResults.  # noqa: E501
        :rtype: bool
        """
        return self._flagged

    @flagged.setter
    def flagged(self, flagged):
        """Sets the flagged of this CreateModerationResponseResults.

        Whether any of the below categories are flagged.  # noqa: E501

        :param flagged: The flagged of this CreateModerationResponseResults.  # noqa: E501
        :type: bool
        """
        if flagged is None:
            raise ValueError("Invalid value for `flagged`, must not be `None`")  # noqa: E501

        self._flagged = flagged

    @property
    def categories(self):
        """Gets the categories of this CreateModerationResponseResults.  # noqa: E501


        :return: The categories of this CreateModerationResponseResults.  # noqa: E501
        :rtype: CreateModerationResponseCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CreateModerationResponseResults.


        :param categories: The categories of this CreateModerationResponseResults.  # noqa: E501
        :type: CreateModerationResponseCategories
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def category_scores(self):
        """Gets the category_scores of this CreateModerationResponseResults.  # noqa: E501


        :return: The category_scores of this CreateModerationResponseResults.  # noqa: E501
        :rtype: CreateModerationResponseCategoryScores
        """
        return self._category_scores

    @category_scores.setter
    def category_scores(self, category_scores):
        """Sets the category_scores of this CreateModerationResponseResults.


        :param category_scores: The category_scores of this CreateModerationResponseResults.  # noqa: E501
        :type: CreateModerationResponseCategoryScores
        """
        if category_scores is None:
            raise ValueError("Invalid value for `category_scores`, must not be `None`")  # noqa: E501

        self._category_scores = category_scores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateModerationResponseResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateModerationResponseResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

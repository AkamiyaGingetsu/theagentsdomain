# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateEmbeddingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[Embedding]',
        'model': 'str',
        'object': 'str',
        'usage': 'CreateEmbeddingResponseUsage'
    }

    attribute_map = {
        'data': 'data',
        'model': 'model',
        'object': 'object',
        'usage': 'usage'
    }

    def __init__(self, data=None, model=None, object=None, usage=None):  # noqa: E501
        """CreateEmbeddingResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._model = None
        self._object = None
        self._usage = None
        self.discriminator = None
        self.data = data
        self.model = model
        self.object = object
        self.usage = usage

    @property
    def data(self):
        """Gets the data of this CreateEmbeddingResponse.  # noqa: E501

        The list of embeddings generated by the model.  # noqa: E501

        :return: The data of this CreateEmbeddingResponse.  # noqa: E501
        :rtype: list[Embedding]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CreateEmbeddingResponse.

        The list of embeddings generated by the model.  # noqa: E501

        :param data: The data of this CreateEmbeddingResponse.  # noqa: E501
        :type: list[Embedding]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def model(self):
        """Gets the model of this CreateEmbeddingResponse.  # noqa: E501

        The name of the model used to generate the embedding.  # noqa: E501

        :return: The model of this CreateEmbeddingResponse.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateEmbeddingResponse.

        The name of the model used to generate the embedding.  # noqa: E501

        :param model: The model of this CreateEmbeddingResponse.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def object(self):
        """Gets the object of this CreateEmbeddingResponse.  # noqa: E501

        The object type, which is always \"list\".  # noqa: E501

        :return: The object of this CreateEmbeddingResponse.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this CreateEmbeddingResponse.

        The object type, which is always \"list\".  # noqa: E501

        :param object: The object of this CreateEmbeddingResponse.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["list"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def usage(self):
        """Gets the usage of this CreateEmbeddingResponse.  # noqa: E501


        :return: The usage of this CreateEmbeddingResponse.  # noqa: E501
        :rtype: CreateEmbeddingResponseUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this CreateEmbeddingResponse.


        :param usage: The usage of this CreateEmbeddingResponse.  # noqa: E501
        :type: CreateEmbeddingResponseUsage
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateEmbeddingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateEmbeddingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

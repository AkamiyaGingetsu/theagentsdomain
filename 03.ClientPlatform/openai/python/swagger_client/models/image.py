# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'b64_json': 'str',
        'url': 'str',
        'revised_prompt': 'str'
    }

    attribute_map = {
        'b64_json': 'b64_json',
        'url': 'url',
        'revised_prompt': 'revised_prompt'
    }

    def __init__(self, b64_json=None, url=None, revised_prompt=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501
        self._b64_json = None
        self._url = None
        self._revised_prompt = None
        self.discriminator = None
        if b64_json is not None:
            self.b64_json = b64_json
        if url is not None:
            self.url = url
        if revised_prompt is not None:
            self.revised_prompt = revised_prompt

    @property
    def b64_json(self):
        """Gets the b64_json of this Image.  # noqa: E501

        The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.  # noqa: E501

        :return: The b64_json of this Image.  # noqa: E501
        :rtype: str
        """
        return self._b64_json

    @b64_json.setter
    def b64_json(self, b64_json):
        """Sets the b64_json of this Image.

        The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.  # noqa: E501

        :param b64_json: The b64_json of this Image.  # noqa: E501
        :type: str
        """

        self._b64_json = b64_json

    @property
    def url(self):
        """Gets the url of this Image.  # noqa: E501

        The URL of the generated image, if `response_format` is `url` (default).  # noqa: E501

        :return: The url of this Image.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Image.

        The URL of the generated image, if `response_format` is `url` (default).  # noqa: E501

        :param url: The url of this Image.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def revised_prompt(self):
        """Gets the revised_prompt of this Image.  # noqa: E501

        The prompt that was used to generate the image, if there was any revision to the prompt.  # noqa: E501

        :return: The revised_prompt of this Image.  # noqa: E501
        :rtype: str
        """
        return self._revised_prompt

    @revised_prompt.setter
    def revised_prompt(self, revised_prompt):
        """Sets the revised_prompt of this Image.

        The prompt that was used to generate the image, if there was any revision to the prompt.  # noqa: E501

        :param revised_prompt: The revised_prompt of this Image.  # noqa: E501
        :type: str
        """

        self._revised_prompt = revised_prompt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

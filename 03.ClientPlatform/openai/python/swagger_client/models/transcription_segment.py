# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TranscriptionSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'seek': 'int',
        'start': 'float',
        'end': 'float',
        'text': 'str',
        'tokens': 'list[int]',
        'temperature': 'float',
        'avg_logprob': 'float',
        'compression_ratio': 'float',
        'no_speech_prob': 'float'
    }

    attribute_map = {
        'id': 'id',
        'seek': 'seek',
        'start': 'start',
        'end': 'end',
        'text': 'text',
        'tokens': 'tokens',
        'temperature': 'temperature',
        'avg_logprob': 'avg_logprob',
        'compression_ratio': 'compression_ratio',
        'no_speech_prob': 'no_speech_prob'
    }

    def __init__(self, id=None, seek=None, start=None, end=None, text=None, tokens=None, temperature=None, avg_logprob=None, compression_ratio=None, no_speech_prob=None):  # noqa: E501
        """TranscriptionSegment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._seek = None
        self._start = None
        self._end = None
        self._text = None
        self._tokens = None
        self._temperature = None
        self._avg_logprob = None
        self._compression_ratio = None
        self._no_speech_prob = None
        self.discriminator = None
        self.id = id
        self.seek = seek
        self.start = start
        self.end = end
        self.text = text
        self.tokens = tokens
        self.temperature = temperature
        self.avg_logprob = avg_logprob
        self.compression_ratio = compression_ratio
        self.no_speech_prob = no_speech_prob

    @property
    def id(self):
        """Gets the id of this TranscriptionSegment.  # noqa: E501

        Unique identifier of the segment.  # noqa: E501

        :return: The id of this TranscriptionSegment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TranscriptionSegment.

        Unique identifier of the segment.  # noqa: E501

        :param id: The id of this TranscriptionSegment.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def seek(self):
        """Gets the seek of this TranscriptionSegment.  # noqa: E501

        Seek offset of the segment.  # noqa: E501

        :return: The seek of this TranscriptionSegment.  # noqa: E501
        :rtype: int
        """
        return self._seek

    @seek.setter
    def seek(self, seek):
        """Sets the seek of this TranscriptionSegment.

        Seek offset of the segment.  # noqa: E501

        :param seek: The seek of this TranscriptionSegment.  # noqa: E501
        :type: int
        """
        if seek is None:
            raise ValueError("Invalid value for `seek`, must not be `None`")  # noqa: E501

        self._seek = seek

    @property
    def start(self):
        """Gets the start of this TranscriptionSegment.  # noqa: E501

        Start time of the segment in seconds.  # noqa: E501

        :return: The start of this TranscriptionSegment.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TranscriptionSegment.

        Start time of the segment in seconds.  # noqa: E501

        :param start: The start of this TranscriptionSegment.  # noqa: E501
        :type: float
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this TranscriptionSegment.  # noqa: E501

        End time of the segment in seconds.  # noqa: E501

        :return: The end of this TranscriptionSegment.  # noqa: E501
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TranscriptionSegment.

        End time of the segment in seconds.  # noqa: E501

        :param end: The end of this TranscriptionSegment.  # noqa: E501
        :type: float
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def text(self):
        """Gets the text of this TranscriptionSegment.  # noqa: E501

        Text content of the segment.  # noqa: E501

        :return: The text of this TranscriptionSegment.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TranscriptionSegment.

        Text content of the segment.  # noqa: E501

        :param text: The text of this TranscriptionSegment.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def tokens(self):
        """Gets the tokens of this TranscriptionSegment.  # noqa: E501

        Array of token IDs for the text content.  # noqa: E501

        :return: The tokens of this TranscriptionSegment.  # noqa: E501
        :rtype: list[int]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this TranscriptionSegment.

        Array of token IDs for the text content.  # noqa: E501

        :param tokens: The tokens of this TranscriptionSegment.  # noqa: E501
        :type: list[int]
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def temperature(self):
        """Gets the temperature of this TranscriptionSegment.  # noqa: E501

        Temperature parameter used for generating the segment.  # noqa: E501

        :return: The temperature of this TranscriptionSegment.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this TranscriptionSegment.

        Temperature parameter used for generating the segment.  # noqa: E501

        :param temperature: The temperature of this TranscriptionSegment.  # noqa: E501
        :type: float
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")  # noqa: E501

        self._temperature = temperature

    @property
    def avg_logprob(self):
        """Gets the avg_logprob of this TranscriptionSegment.  # noqa: E501

        Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.  # noqa: E501

        :return: The avg_logprob of this TranscriptionSegment.  # noqa: E501
        :rtype: float
        """
        return self._avg_logprob

    @avg_logprob.setter
    def avg_logprob(self, avg_logprob):
        """Sets the avg_logprob of this TranscriptionSegment.

        Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.  # noqa: E501

        :param avg_logprob: The avg_logprob of this TranscriptionSegment.  # noqa: E501
        :type: float
        """
        if avg_logprob is None:
            raise ValueError("Invalid value for `avg_logprob`, must not be `None`")  # noqa: E501

        self._avg_logprob = avg_logprob

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this TranscriptionSegment.  # noqa: E501

        Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.  # noqa: E501

        :return: The compression_ratio of this TranscriptionSegment.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this TranscriptionSegment.

        Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.  # noqa: E501

        :param compression_ratio: The compression_ratio of this TranscriptionSegment.  # noqa: E501
        :type: float
        """
        if compression_ratio is None:
            raise ValueError("Invalid value for `compression_ratio`, must not be `None`")  # noqa: E501

        self._compression_ratio = compression_ratio

    @property
    def no_speech_prob(self):
        """Gets the no_speech_prob of this TranscriptionSegment.  # noqa: E501

        Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.  # noqa: E501

        :return: The no_speech_prob of this TranscriptionSegment.  # noqa: E501
        :rtype: float
        """
        return self._no_speech_prob

    @no_speech_prob.setter
    def no_speech_prob(self, no_speech_prob):
        """Sets the no_speech_prob of this TranscriptionSegment.

        Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.  # noqa: E501

        :param no_speech_prob: The no_speech_prob of this TranscriptionSegment.  # noqa: E501
        :type: float
        """
        if no_speech_prob is None:
            raise ValueError("Invalid value for `no_speech_prob`, must not be `None`")  # noqa: E501

        self._no_speech_prob = no_speech_prob

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranscriptionSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranscriptionSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessageObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'created_at': 'int',
        'thread_id': 'str',
        'status': 'str',
        'incomplete_details': 'MessageObjectIncompleteDetails',
        'completed_at': 'int',
        'incomplete_at': 'int',
        'role': 'str',
        'content': 'list[OneOfMessageObjectContentItems]',
        'assistant_id': 'str',
        'run_id': 'str',
        'attachments': 'list[MessageObjectAttachments]',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'created_at': 'created_at',
        'thread_id': 'thread_id',
        'status': 'status',
        'incomplete_details': 'incomplete_details',
        'completed_at': 'completed_at',
        'incomplete_at': 'incomplete_at',
        'role': 'role',
        'content': 'content',
        'assistant_id': 'assistant_id',
        'run_id': 'run_id',
        'attachments': 'attachments',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, object=None, created_at=None, thread_id=None, status=None, incomplete_details=None, completed_at=None, incomplete_at=None, role=None, content=None, assistant_id=None, run_id=None, attachments=None, metadata=None):  # noqa: E501
        """MessageObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._created_at = None
        self._thread_id = None
        self._status = None
        self._incomplete_details = None
        self._completed_at = None
        self._incomplete_at = None
        self._role = None
        self._content = None
        self._assistant_id = None
        self._run_id = None
        self._attachments = None
        self._metadata = None
        self.discriminator = None
        self.id = id
        self.object = object
        self.created_at = created_at
        self.thread_id = thread_id
        self.status = status
        self.incomplete_details = incomplete_details
        self.completed_at = completed_at
        self.incomplete_at = incomplete_at
        self.role = role
        self.content = content
        self.assistant_id = assistant_id
        self.run_id = run_id
        self.attachments = attachments
        self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this MessageObject.  # noqa: E501

        The identifier, which can be referenced in API endpoints.  # noqa: E501

        :return: The id of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageObject.

        The identifier, which can be referenced in API endpoints.  # noqa: E501

        :param id: The id of this MessageObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object(self):
        """Gets the object of this MessageObject.  # noqa: E501

        The object type, which is always `thread.message`.  # noqa: E501

        :return: The object of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this MessageObject.

        The object type, which is always `thread.message`.  # noqa: E501

        :param object: The object of this MessageObject.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["thread.message"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def created_at(self):
        """Gets the created_at of this MessageObject.  # noqa: E501

        The Unix timestamp (in seconds) for when the message was created.  # noqa: E501

        :return: The created_at of this MessageObject.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MessageObject.

        The Unix timestamp (in seconds) for when the message was created.  # noqa: E501

        :param created_at: The created_at of this MessageObject.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def thread_id(self):
        """Gets the thread_id of this MessageObject.  # noqa: E501

        The [thread](/docs/api-reference/threads) ID that this message belongs to.  # noqa: E501

        :return: The thread_id of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this MessageObject.

        The [thread](/docs/api-reference/threads) ID that this message belongs to.  # noqa: E501

        :param thread_id: The thread_id of this MessageObject.  # noqa: E501
        :type: str
        """
        if thread_id is None:
            raise ValueError("Invalid value for `thread_id`, must not be `None`")  # noqa: E501

        self._thread_id = thread_id

    @property
    def status(self):
        """Gets the status of this MessageObject.  # noqa: E501

        The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.  # noqa: E501

        :return: The status of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessageObject.

        The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.  # noqa: E501

        :param status: The status of this MessageObject.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["in_progress", "incomplete", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def incomplete_details(self):
        """Gets the incomplete_details of this MessageObject.  # noqa: E501


        :return: The incomplete_details of this MessageObject.  # noqa: E501
        :rtype: MessageObjectIncompleteDetails
        """
        return self._incomplete_details

    @incomplete_details.setter
    def incomplete_details(self, incomplete_details):
        """Sets the incomplete_details of this MessageObject.


        :param incomplete_details: The incomplete_details of this MessageObject.  # noqa: E501
        :type: MessageObjectIncompleteDetails
        """
        if incomplete_details is None:
            raise ValueError("Invalid value for `incomplete_details`, must not be `None`")  # noqa: E501

        self._incomplete_details = incomplete_details

    @property
    def completed_at(self):
        """Gets the completed_at of this MessageObject.  # noqa: E501

        The Unix timestamp (in seconds) for when the message was completed.  # noqa: E501

        :return: The completed_at of this MessageObject.  # noqa: E501
        :rtype: int
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this MessageObject.

        The Unix timestamp (in seconds) for when the message was completed.  # noqa: E501

        :param completed_at: The completed_at of this MessageObject.  # noqa: E501
        :type: int
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")  # noqa: E501

        self._completed_at = completed_at

    @property
    def incomplete_at(self):
        """Gets the incomplete_at of this MessageObject.  # noqa: E501

        The Unix timestamp (in seconds) for when the message was marked as incomplete.  # noqa: E501

        :return: The incomplete_at of this MessageObject.  # noqa: E501
        :rtype: int
        """
        return self._incomplete_at

    @incomplete_at.setter
    def incomplete_at(self, incomplete_at):
        """Sets the incomplete_at of this MessageObject.

        The Unix timestamp (in seconds) for when the message was marked as incomplete.  # noqa: E501

        :param incomplete_at: The incomplete_at of this MessageObject.  # noqa: E501
        :type: int
        """
        if incomplete_at is None:
            raise ValueError("Invalid value for `incomplete_at`, must not be `None`")  # noqa: E501

        self._incomplete_at = incomplete_at

    @property
    def role(self):
        """Gets the role of this MessageObject.  # noqa: E501

        The entity that produced the message. One of `user` or `assistant`.  # noqa: E501

        :return: The role of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MessageObject.

        The entity that produced the message. One of `user` or `assistant`.  # noqa: E501

        :param role: The role of this MessageObject.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "assistant"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def content(self):
        """Gets the content of this MessageObject.  # noqa: E501

        The content of the message in array of text and/or images.  # noqa: E501

        :return: The content of this MessageObject.  # noqa: E501
        :rtype: list[OneOfMessageObjectContentItems]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MessageObject.

        The content of the message in array of text and/or images.  # noqa: E501

        :param content: The content of this MessageObject.  # noqa: E501
        :type: list[OneOfMessageObjectContentItems]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def assistant_id(self):
        """Gets the assistant_id of this MessageObject.  # noqa: E501

        If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.  # noqa: E501

        :return: The assistant_id of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this MessageObject.

        If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.  # noqa: E501

        :param assistant_id: The assistant_id of this MessageObject.  # noqa: E501
        :type: str
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")  # noqa: E501

        self._assistant_id = assistant_id

    @property
    def run_id(self):
        """Gets the run_id of this MessageObject.  # noqa: E501

        The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.  # noqa: E501

        :return: The run_id of this MessageObject.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this MessageObject.

        The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.  # noqa: E501

        :param run_id: The run_id of this MessageObject.  # noqa: E501
        :type: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def attachments(self):
        """Gets the attachments of this MessageObject.  # noqa: E501

        A list of files attached to the message, and the tools they were added to.  # noqa: E501

        :return: The attachments of this MessageObject.  # noqa: E501
        :rtype: list[MessageObjectAttachments]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MessageObject.

        A list of files attached to the message, and the tools they were added to.  # noqa: E501

        :param attachments: The attachments of this MessageObject.  # noqa: E501
        :type: list[MessageObjectAttachments]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def metadata(self):
        """Gets the metadata of this MessageObject.  # noqa: E501

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this MessageObject.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MessageObject.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this MessageObject.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

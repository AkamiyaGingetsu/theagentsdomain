# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchRequestCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'completed': 'int',
        'failed': 'int'
    }

    attribute_map = {
        'total': 'total',
        'completed': 'completed',
        'failed': 'failed'
    }

    def __init__(self, total=None, completed=None, failed=None):  # noqa: E501
        """BatchRequestCounts - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._completed = None
        self._failed = None
        self.discriminator = None
        self.total = total
        self.completed = completed
        self.failed = failed

    @property
    def total(self):
        """Gets the total of this BatchRequestCounts.  # noqa: E501

        Total number of requests in the batch.  # noqa: E501

        :return: The total of this BatchRequestCounts.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BatchRequestCounts.

        Total number of requests in the batch.  # noqa: E501

        :param total: The total of this BatchRequestCounts.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def completed(self):
        """Gets the completed of this BatchRequestCounts.  # noqa: E501

        Number of requests that have been completed successfully.  # noqa: E501

        :return: The completed of this BatchRequestCounts.  # noqa: E501
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this BatchRequestCounts.

        Number of requests that have been completed successfully.  # noqa: E501

        :param completed: The completed of this BatchRequestCounts.  # noqa: E501
        :type: int
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def failed(self):
        """Gets the failed of this BatchRequestCounts.  # noqa: E501

        Number of requests that have failed.  # noqa: E501

        :return: The failed of this BatchRequestCounts.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this BatchRequestCounts.

        Number of requests that have failed.  # noqa: E501

        :param failed: The failed of this BatchRequestCounts.  # noqa: E501
        :type: int
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")  # noqa: E501

        self._failed = failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchRequestCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchRequestCounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

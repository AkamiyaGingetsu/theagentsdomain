# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunStepDeltaStepDetailsToolCallsCodeObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'id': 'str',
        'type': 'str',
        'code_interpreter': 'RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter'
    }

    attribute_map = {
        'index': 'index',
        'id': 'id',
        'type': 'type',
        'code_interpreter': 'code_interpreter'
    }

    def __init__(self, index=None, id=None, type=None, code_interpreter=None):  # noqa: E501
        """RunStepDeltaStepDetailsToolCallsCodeObject - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._id = None
        self._type = None
        self._code_interpreter = None
        self.discriminator = None
        self.index = index
        if id is not None:
            self.id = id
        self.type = type
        if code_interpreter is not None:
            self.code_interpreter = code_interpreter

    @property
    def index(self):
        """Gets the index of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501

        The index of the tool call in the tool calls array.  # noqa: E501

        :return: The index of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this RunStepDeltaStepDetailsToolCallsCodeObject.

        The index of the tool call in the tool calls array.  # noqa: E501

        :param index: The index of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def id(self):
        """Gets the id of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501

        The ID of the tool call.  # noqa: E501

        :return: The id of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunStepDeltaStepDetailsToolCallsCodeObject.

        The ID of the tool call.  # noqa: E501

        :param id: The id of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501

        The type of tool call. This is always going to be `code_interpreter` for this type of tool call.  # noqa: E501

        :return: The type of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RunStepDeltaStepDetailsToolCallsCodeObject.

        The type of tool call. This is always going to be `code_interpreter` for this type of tool call.  # noqa: E501

        :param type: The type of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["code_interpreter"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def code_interpreter(self):
        """Gets the code_interpreter of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501


        :return: The code_interpreter of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :rtype: RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
        """
        return self._code_interpreter

    @code_interpreter.setter
    def code_interpreter(self, code_interpreter):
        """Sets the code_interpreter of this RunStepDeltaStepDetailsToolCallsCodeObject.


        :param code_interpreter: The code_interpreter of this RunStepDeltaStepDetailsToolCallsCodeObject.  # noqa: E501
        :type: RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
        """

        self._code_interpreter = code_interpreter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunStepDeltaStepDetailsToolCallsCodeObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunStepDeltaStepDetailsToolCallsCodeObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FineTuningJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'error': 'FineTuningJobError',
        'fine_tuned_model': 'str',
        'finished_at': 'int',
        'hyperparameters': 'FineTuningJobHyperparameters',
        'model': 'str',
        'object': 'str',
        'organization_id': 'str',
        'result_files': 'list[str]',
        'status': 'str',
        'trained_tokens': 'int',
        'training_file': 'str',
        'validation_file': 'str',
        'integrations': 'list[OneOfFineTuningJobIntegrationsItems]',
        'seed': 'int',
        'estimated_finish': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'error': 'error',
        'fine_tuned_model': 'fine_tuned_model',
        'finished_at': 'finished_at',
        'hyperparameters': 'hyperparameters',
        'model': 'model',
        'object': 'object',
        'organization_id': 'organization_id',
        'result_files': 'result_files',
        'status': 'status',
        'trained_tokens': 'trained_tokens',
        'training_file': 'training_file',
        'validation_file': 'validation_file',
        'integrations': 'integrations',
        'seed': 'seed',
        'estimated_finish': 'estimated_finish'
    }

    def __init__(self, id=None, created_at=None, error=None, fine_tuned_model=None, finished_at=None, hyperparameters=None, model=None, object=None, organization_id=None, result_files=None, status=None, trained_tokens=None, training_file=None, validation_file=None, integrations=None, seed=None, estimated_finish=None):  # noqa: E501
        """FineTuningJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._error = None
        self._fine_tuned_model = None
        self._finished_at = None
        self._hyperparameters = None
        self._model = None
        self._object = None
        self._organization_id = None
        self._result_files = None
        self._status = None
        self._trained_tokens = None
        self._training_file = None
        self._validation_file = None
        self._integrations = None
        self._seed = None
        self._estimated_finish = None
        self.discriminator = None
        self.id = id
        self.created_at = created_at
        self.error = error
        self.fine_tuned_model = fine_tuned_model
        self.finished_at = finished_at
        self.hyperparameters = hyperparameters
        self.model = model
        self.object = object
        self.organization_id = organization_id
        self.result_files = result_files
        self.status = status
        self.trained_tokens = trained_tokens
        self.training_file = training_file
        self.validation_file = validation_file
        if integrations is not None:
            self.integrations = integrations
        self.seed = seed
        if estimated_finish is not None:
            self.estimated_finish = estimated_finish

    @property
    def id(self):
        """Gets the id of this FineTuningJob.  # noqa: E501

        The object identifier, which can be referenced in the API endpoints.  # noqa: E501

        :return: The id of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FineTuningJob.

        The object identifier, which can be referenced in the API endpoints.  # noqa: E501

        :param id: The id of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this FineTuningJob.  # noqa: E501

        The Unix timestamp (in seconds) for when the fine-tuning job was created.  # noqa: E501

        :return: The created_at of this FineTuningJob.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FineTuningJob.

        The Unix timestamp (in seconds) for when the fine-tuning job was created.  # noqa: E501

        :param created_at: The created_at of this FineTuningJob.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def error(self):
        """Gets the error of this FineTuningJob.  # noqa: E501


        :return: The error of this FineTuningJob.  # noqa: E501
        :rtype: FineTuningJobError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FineTuningJob.


        :param error: The error of this FineTuningJob.  # noqa: E501
        :type: FineTuningJobError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def fine_tuned_model(self):
        """Gets the fine_tuned_model of this FineTuningJob.  # noqa: E501

        The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.  # noqa: E501

        :return: The fine_tuned_model of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._fine_tuned_model

    @fine_tuned_model.setter
    def fine_tuned_model(self, fine_tuned_model):
        """Sets the fine_tuned_model of this FineTuningJob.

        The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.  # noqa: E501

        :param fine_tuned_model: The fine_tuned_model of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if fine_tuned_model is None:
            raise ValueError("Invalid value for `fine_tuned_model`, must not be `None`")  # noqa: E501

        self._fine_tuned_model = fine_tuned_model

    @property
    def finished_at(self):
        """Gets the finished_at of this FineTuningJob.  # noqa: E501

        The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.  # noqa: E501

        :return: The finished_at of this FineTuningJob.  # noqa: E501
        :rtype: int
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this FineTuningJob.

        The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.  # noqa: E501

        :param finished_at: The finished_at of this FineTuningJob.  # noqa: E501
        :type: int
        """
        if finished_at is None:
            raise ValueError("Invalid value for `finished_at`, must not be `None`")  # noqa: E501

        self._finished_at = finished_at

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this FineTuningJob.  # noqa: E501


        :return: The hyperparameters of this FineTuningJob.  # noqa: E501
        :rtype: FineTuningJobHyperparameters
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this FineTuningJob.


        :param hyperparameters: The hyperparameters of this FineTuningJob.  # noqa: E501
        :type: FineTuningJobHyperparameters
        """
        if hyperparameters is None:
            raise ValueError("Invalid value for `hyperparameters`, must not be `None`")  # noqa: E501

        self._hyperparameters = hyperparameters

    @property
    def model(self):
        """Gets the model of this FineTuningJob.  # noqa: E501

        The base model that is being fine-tuned.  # noqa: E501

        :return: The model of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this FineTuningJob.

        The base model that is being fine-tuned.  # noqa: E501

        :param model: The model of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def object(self):
        """Gets the object of this FineTuningJob.  # noqa: E501

        The object type, which is always \"fine_tuning.job\".  # noqa: E501

        :return: The object of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this FineTuningJob.

        The object type, which is always \"fine_tuning.job\".  # noqa: E501

        :param object: The object of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["fine_tuning.job"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def organization_id(self):
        """Gets the organization_id of this FineTuningJob.  # noqa: E501

        The organization that owns the fine-tuning job.  # noqa: E501

        :return: The organization_id of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this FineTuningJob.

        The organization that owns the fine-tuning job.  # noqa: E501

        :param organization_id: The organization_id of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def result_files(self):
        """Gets the result_files of this FineTuningJob.  # noqa: E501

        The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).  # noqa: E501

        :return: The result_files of this FineTuningJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._result_files

    @result_files.setter
    def result_files(self, result_files):
        """Sets the result_files of this FineTuningJob.

        The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).  # noqa: E501

        :param result_files: The result_files of this FineTuningJob.  # noqa: E501
        :type: list[str]
        """
        if result_files is None:
            raise ValueError("Invalid value for `result_files`, must not be `None`")  # noqa: E501

        self._result_files = result_files

    @property
    def status(self):
        """Gets the status of this FineTuningJob.  # noqa: E501

        The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.  # noqa: E501

        :return: The status of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FineTuningJob.

        The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.  # noqa: E501

        :param status: The status of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["validating_files", "queued", "running", "succeeded", "failed", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trained_tokens(self):
        """Gets the trained_tokens of this FineTuningJob.  # noqa: E501

        The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.  # noqa: E501

        :return: The trained_tokens of this FineTuningJob.  # noqa: E501
        :rtype: int
        """
        return self._trained_tokens

    @trained_tokens.setter
    def trained_tokens(self, trained_tokens):
        """Sets the trained_tokens of this FineTuningJob.

        The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.  # noqa: E501

        :param trained_tokens: The trained_tokens of this FineTuningJob.  # noqa: E501
        :type: int
        """
        if trained_tokens is None:
            raise ValueError("Invalid value for `trained_tokens`, must not be `None`")  # noqa: E501

        self._trained_tokens = trained_tokens

    @property
    def training_file(self):
        """Gets the training_file of this FineTuningJob.  # noqa: E501

        The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).  # noqa: E501

        :return: The training_file of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._training_file

    @training_file.setter
    def training_file(self, training_file):
        """Sets the training_file of this FineTuningJob.

        The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).  # noqa: E501

        :param training_file: The training_file of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if training_file is None:
            raise ValueError("Invalid value for `training_file`, must not be `None`")  # noqa: E501

        self._training_file = training_file

    @property
    def validation_file(self):
        """Gets the validation_file of this FineTuningJob.  # noqa: E501

        The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).  # noqa: E501

        :return: The validation_file of this FineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._validation_file

    @validation_file.setter
    def validation_file(self, validation_file):
        """Sets the validation_file of this FineTuningJob.

        The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).  # noqa: E501

        :param validation_file: The validation_file of this FineTuningJob.  # noqa: E501
        :type: str
        """
        if validation_file is None:
            raise ValueError("Invalid value for `validation_file`, must not be `None`")  # noqa: E501

        self._validation_file = validation_file

    @property
    def integrations(self):
        """Gets the integrations of this FineTuningJob.  # noqa: E501

        A list of integrations to enable for this fine-tuning job.  # noqa: E501

        :return: The integrations of this FineTuningJob.  # noqa: E501
        :rtype: list[OneOfFineTuningJobIntegrationsItems]
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this FineTuningJob.

        A list of integrations to enable for this fine-tuning job.  # noqa: E501

        :param integrations: The integrations of this FineTuningJob.  # noqa: E501
        :type: list[OneOfFineTuningJobIntegrationsItems]
        """

        self._integrations = integrations

    @property
    def seed(self):
        """Gets the seed of this FineTuningJob.  # noqa: E501

        The seed used for the fine-tuning job.  # noqa: E501

        :return: The seed of this FineTuningJob.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this FineTuningJob.

        The seed used for the fine-tuning job.  # noqa: E501

        :param seed: The seed of this FineTuningJob.  # noqa: E501
        :type: int
        """
        if seed is None:
            raise ValueError("Invalid value for `seed`, must not be `None`")  # noqa: E501

        self._seed = seed

    @property
    def estimated_finish(self):
        """Gets the estimated_finish of this FineTuningJob.  # noqa: E501

        The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.  # noqa: E501

        :return: The estimated_finish of this FineTuningJob.  # noqa: E501
        :rtype: int
        """
        return self._estimated_finish

    @estimated_finish.setter
    def estimated_finish(self, estimated_finish):
        """Sets the estimated_finish of this FineTuningJob.

        The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.  # noqa: E501

        :param estimated_finish: The estimated_finish of this FineTuningJob.  # noqa: E501
        :type: int
        """

        self._estimated_finish = estimated_finish

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FineTuningJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FineTuningJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

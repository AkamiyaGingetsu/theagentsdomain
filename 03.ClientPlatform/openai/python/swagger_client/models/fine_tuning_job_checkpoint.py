# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FineTuningJobCheckpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'fine_tuned_model_checkpoint': 'str',
        'step_number': 'int',
        'metrics': 'FineTuningJobCheckpointMetrics',
        'fine_tuning_job_id': 'str',
        'object': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'fine_tuned_model_checkpoint': 'fine_tuned_model_checkpoint',
        'step_number': 'step_number',
        'metrics': 'metrics',
        'fine_tuning_job_id': 'fine_tuning_job_id',
        'object': 'object'
    }

    def __init__(self, id=None, created_at=None, fine_tuned_model_checkpoint=None, step_number=None, metrics=None, fine_tuning_job_id=None, object=None):  # noqa: E501
        """FineTuningJobCheckpoint - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._fine_tuned_model_checkpoint = None
        self._step_number = None
        self._metrics = None
        self._fine_tuning_job_id = None
        self._object = None
        self.discriminator = None
        self.id = id
        self.created_at = created_at
        self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint
        self.step_number = step_number
        self.metrics = metrics
        self.fine_tuning_job_id = fine_tuning_job_id
        self.object = object

    @property
    def id(self):
        """Gets the id of this FineTuningJobCheckpoint.  # noqa: E501

        The checkpoint identifier, which can be referenced in the API endpoints.  # noqa: E501

        :return: The id of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FineTuningJobCheckpoint.

        The checkpoint identifier, which can be referenced in the API endpoints.  # noqa: E501

        :param id: The id of this FineTuningJobCheckpoint.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this FineTuningJobCheckpoint.  # noqa: E501

        The Unix timestamp (in seconds) for when the checkpoint was created.  # noqa: E501

        :return: The created_at of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FineTuningJobCheckpoint.

        The Unix timestamp (in seconds) for when the checkpoint was created.  # noqa: E501

        :param created_at: The created_at of this FineTuningJobCheckpoint.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def fine_tuned_model_checkpoint(self):
        """Gets the fine_tuned_model_checkpoint of this FineTuningJobCheckpoint.  # noqa: E501

        The name of the fine-tuned checkpoint model that is created.  # noqa: E501

        :return: The fine_tuned_model_checkpoint of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._fine_tuned_model_checkpoint

    @fine_tuned_model_checkpoint.setter
    def fine_tuned_model_checkpoint(self, fine_tuned_model_checkpoint):
        """Sets the fine_tuned_model_checkpoint of this FineTuningJobCheckpoint.

        The name of the fine-tuned checkpoint model that is created.  # noqa: E501

        :param fine_tuned_model_checkpoint: The fine_tuned_model_checkpoint of this FineTuningJobCheckpoint.  # noqa: E501
        :type: str
        """
        if fine_tuned_model_checkpoint is None:
            raise ValueError("Invalid value for `fine_tuned_model_checkpoint`, must not be `None`")  # noqa: E501

        self._fine_tuned_model_checkpoint = fine_tuned_model_checkpoint

    @property
    def step_number(self):
        """Gets the step_number of this FineTuningJobCheckpoint.  # noqa: E501

        The step number that the checkpoint was created at.  # noqa: E501

        :return: The step_number of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: int
        """
        return self._step_number

    @step_number.setter
    def step_number(self, step_number):
        """Sets the step_number of this FineTuningJobCheckpoint.

        The step number that the checkpoint was created at.  # noqa: E501

        :param step_number: The step_number of this FineTuningJobCheckpoint.  # noqa: E501
        :type: int
        """
        if step_number is None:
            raise ValueError("Invalid value for `step_number`, must not be `None`")  # noqa: E501

        self._step_number = step_number

    @property
    def metrics(self):
        """Gets the metrics of this FineTuningJobCheckpoint.  # noqa: E501


        :return: The metrics of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: FineTuningJobCheckpointMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this FineTuningJobCheckpoint.


        :param metrics: The metrics of this FineTuningJobCheckpoint.  # noqa: E501
        :type: FineTuningJobCheckpointMetrics
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def fine_tuning_job_id(self):
        """Gets the fine_tuning_job_id of this FineTuningJobCheckpoint.  # noqa: E501

        The name of the fine-tuning job that this checkpoint was created from.  # noqa: E501

        :return: The fine_tuning_job_id of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._fine_tuning_job_id

    @fine_tuning_job_id.setter
    def fine_tuning_job_id(self, fine_tuning_job_id):
        """Sets the fine_tuning_job_id of this FineTuningJobCheckpoint.

        The name of the fine-tuning job that this checkpoint was created from.  # noqa: E501

        :param fine_tuning_job_id: The fine_tuning_job_id of this FineTuningJobCheckpoint.  # noqa: E501
        :type: str
        """
        if fine_tuning_job_id is None:
            raise ValueError("Invalid value for `fine_tuning_job_id`, must not be `None`")  # noqa: E501

        self._fine_tuning_job_id = fine_tuning_job_id

    @property
    def object(self):
        """Gets the object of this FineTuningJobCheckpoint.  # noqa: E501

        The object type, which is always \"fine_tuning.job.checkpoint\".  # noqa: E501

        :return: The object of this FineTuningJobCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this FineTuningJobCheckpoint.

        The object type, which is always \"fine_tuning.job.checkpoint\".  # noqa: E501

        :param object: The object of this FineTuningJobCheckpoint.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["fine_tuning.job.checkpoint"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FineTuningJobCheckpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FineTuningJobCheckpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

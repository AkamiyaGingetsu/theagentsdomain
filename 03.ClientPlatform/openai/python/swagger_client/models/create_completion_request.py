# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCompletionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'AnyOfCreateCompletionRequestModel',
        'prompt': 'OneOfCreateCompletionRequestPrompt',
        'best_of': 'int',
        'echo': 'bool',
        'frequency_penalty': 'float',
        'logit_bias': 'dict(str, int)',
        'logprobs': 'int',
        'max_tokens': 'int',
        'n': 'int',
        'presence_penalty': 'float',
        'seed': 'int',
        'stop': 'OneOfCreateCompletionRequestStop',
        'stream': 'bool',
        'stream_options': 'ChatCompletionStreamOptions',
        'suffix': 'str',
        'temperature': 'float',
        'top_p': 'float',
        'user': 'str'
    }

    attribute_map = {
        'model': 'model',
        'prompt': 'prompt',
        'best_of': 'best_of',
        'echo': 'echo',
        'frequency_penalty': 'frequency_penalty',
        'logit_bias': 'logit_bias',
        'logprobs': 'logprobs',
        'max_tokens': 'max_tokens',
        'n': 'n',
        'presence_penalty': 'presence_penalty',
        'seed': 'seed',
        'stop': 'stop',
        'stream': 'stream',
        'stream_options': 'stream_options',
        'suffix': 'suffix',
        'temperature': 'temperature',
        'top_p': 'top_p',
        'user': 'user'
    }

    def __init__(self, model=None, prompt=None, best_of=1, echo=False, frequency_penalty=0, logit_bias=None, logprobs=None, max_tokens=16, n=1, presence_penalty=0, seed=None, stop=None, stream=False, stream_options=None, suffix=None, temperature=1, top_p=1, user=None):  # noqa: E501
        """CreateCompletionRequest - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._prompt = None
        self._best_of = None
        self._echo = None
        self._frequency_penalty = None
        self._logit_bias = None
        self._logprobs = None
        self._max_tokens = None
        self._n = None
        self._presence_penalty = None
        self._seed = None
        self._stop = None
        self._stream = None
        self._stream_options = None
        self._suffix = None
        self._temperature = None
        self._top_p = None
        self._user = None
        self.discriminator = None
        self.model = model
        self.prompt = prompt
        if best_of is not None:
            self.best_of = best_of
        if echo is not None:
            self.echo = echo
        if frequency_penalty is not None:
            self.frequency_penalty = frequency_penalty
        if logit_bias is not None:
            self.logit_bias = logit_bias
        if logprobs is not None:
            self.logprobs = logprobs
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if n is not None:
            self.n = n
        if presence_penalty is not None:
            self.presence_penalty = presence_penalty
        if seed is not None:
            self.seed = seed
        if stop is not None:
            self.stop = stop
        if stream is not None:
            self.stream = stream
        if stream_options is not None:
            self.stream_options = stream_options
        if suffix is not None:
            self.suffix = suffix
        if temperature is not None:
            self.temperature = temperature
        if top_p is not None:
            self.top_p = top_p
        if user is not None:
            self.user = user

    @property
    def model(self):
        """Gets the model of this CreateCompletionRequest.  # noqa: E501

        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.   # noqa: E501

        :return: The model of this CreateCompletionRequest.  # noqa: E501
        :rtype: AnyOfCreateCompletionRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateCompletionRequest.

        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.   # noqa: E501

        :param model: The model of this CreateCompletionRequest.  # noqa: E501
        :type: AnyOfCreateCompletionRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def prompt(self):
        """Gets the prompt of this CreateCompletionRequest.  # noqa: E501

        The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.   # noqa: E501

        :return: The prompt of this CreateCompletionRequest.  # noqa: E501
        :rtype: OneOfCreateCompletionRequestPrompt
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this CreateCompletionRequest.

        The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.   # noqa: E501

        :param prompt: The prompt of this CreateCompletionRequest.  # noqa: E501
        :type: OneOfCreateCompletionRequestPrompt
        """
        if prompt is None:
            raise ValueError("Invalid value for `prompt`, must not be `None`")  # noqa: E501

        self._prompt = prompt

    @property
    def best_of(self):
        """Gets the best_of of this CreateCompletionRequest.  # noqa: E501

        Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.   # noqa: E501

        :return: The best_of of this CreateCompletionRequest.  # noqa: E501
        :rtype: int
        """
        return self._best_of

    @best_of.setter
    def best_of(self, best_of):
        """Sets the best_of of this CreateCompletionRequest.

        Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.   # noqa: E501

        :param best_of: The best_of of this CreateCompletionRequest.  # noqa: E501
        :type: int
        """

        self._best_of = best_of

    @property
    def echo(self):
        """Gets the echo of this CreateCompletionRequest.  # noqa: E501

        Echo back the prompt in addition to the completion   # noqa: E501

        :return: The echo of this CreateCompletionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._echo

    @echo.setter
    def echo(self, echo):
        """Sets the echo of this CreateCompletionRequest.

        Echo back the prompt in addition to the completion   # noqa: E501

        :param echo: The echo of this CreateCompletionRequest.  # noqa: E501
        :type: bool
        """

        self._echo = echo

    @property
    def frequency_penalty(self):
        """Gets the frequency_penalty of this CreateCompletionRequest.  # noqa: E501

        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)   # noqa: E501

        :return: The frequency_penalty of this CreateCompletionRequest.  # noqa: E501
        :rtype: float
        """
        return self._frequency_penalty

    @frequency_penalty.setter
    def frequency_penalty(self, frequency_penalty):
        """Sets the frequency_penalty of this CreateCompletionRequest.

        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)   # noqa: E501

        :param frequency_penalty: The frequency_penalty of this CreateCompletionRequest.  # noqa: E501
        :type: float
        """

        self._frequency_penalty = frequency_penalty

    @property
    def logit_bias(self):
        """Gets the logit_bias of this CreateCompletionRequest.  # noqa: E501

        Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.   # noqa: E501

        :return: The logit_bias of this CreateCompletionRequest.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._logit_bias

    @logit_bias.setter
    def logit_bias(self, logit_bias):
        """Sets the logit_bias of this CreateCompletionRequest.

        Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.   # noqa: E501

        :param logit_bias: The logit_bias of this CreateCompletionRequest.  # noqa: E501
        :type: dict(str, int)
        """

        self._logit_bias = logit_bias

    @property
    def logprobs(self):
        """Gets the logprobs of this CreateCompletionRequest.  # noqa: E501

        Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.   # noqa: E501

        :return: The logprobs of this CreateCompletionRequest.  # noqa: E501
        :rtype: int
        """
        return self._logprobs

    @logprobs.setter
    def logprobs(self, logprobs):
        """Sets the logprobs of this CreateCompletionRequest.

        Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.   # noqa: E501

        :param logprobs: The logprobs of this CreateCompletionRequest.  # noqa: E501
        :type: int
        """

        self._logprobs = logprobs

    @property
    def max_tokens(self):
        """Gets the max_tokens of this CreateCompletionRequest.  # noqa: E501

        The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.   # noqa: E501

        :return: The max_tokens of this CreateCompletionRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this CreateCompletionRequest.

        The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.   # noqa: E501

        :param max_tokens: The max_tokens of this CreateCompletionRequest.  # noqa: E501
        :type: int
        """

        self._max_tokens = max_tokens

    @property
    def n(self):
        """Gets the n of this CreateCompletionRequest.  # noqa: E501

        How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.   # noqa: E501

        :return: The n of this CreateCompletionRequest.  # noqa: E501
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this CreateCompletionRequest.

        How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.   # noqa: E501

        :param n: The n of this CreateCompletionRequest.  # noqa: E501
        :type: int
        """

        self._n = n

    @property
    def presence_penalty(self):
        """Gets the presence_penalty of this CreateCompletionRequest.  # noqa: E501

        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)   # noqa: E501

        :return: The presence_penalty of this CreateCompletionRequest.  # noqa: E501
        :rtype: float
        """
        return self._presence_penalty

    @presence_penalty.setter
    def presence_penalty(self, presence_penalty):
        """Sets the presence_penalty of this CreateCompletionRequest.

        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)   # noqa: E501

        :param presence_penalty: The presence_penalty of this CreateCompletionRequest.  # noqa: E501
        :type: float
        """

        self._presence_penalty = presence_penalty

    @property
    def seed(self):
        """Gets the seed of this CreateCompletionRequest.  # noqa: E501

        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.   # noqa: E501

        :return: The seed of this CreateCompletionRequest.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this CreateCompletionRequest.

        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.   # noqa: E501

        :param seed: The seed of this CreateCompletionRequest.  # noqa: E501
        :type: int
        """

        self._seed = seed

    @property
    def stop(self):
        """Gets the stop of this CreateCompletionRequest.  # noqa: E501

        Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.   # noqa: E501

        :return: The stop of this CreateCompletionRequest.  # noqa: E501
        :rtype: OneOfCreateCompletionRequestStop
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this CreateCompletionRequest.

        Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.   # noqa: E501

        :param stop: The stop of this CreateCompletionRequest.  # noqa: E501
        :type: OneOfCreateCompletionRequestStop
        """

        self._stop = stop

    @property
    def stream(self):
        """Gets the stream of this CreateCompletionRequest.  # noqa: E501

        Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).   # noqa: E501

        :return: The stream of this CreateCompletionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this CreateCompletionRequest.

        Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).   # noqa: E501

        :param stream: The stream of this CreateCompletionRequest.  # noqa: E501
        :type: bool
        """

        self._stream = stream

    @property
    def stream_options(self):
        """Gets the stream_options of this CreateCompletionRequest.  # noqa: E501


        :return: The stream_options of this CreateCompletionRequest.  # noqa: E501
        :rtype: ChatCompletionStreamOptions
        """
        return self._stream_options

    @stream_options.setter
    def stream_options(self, stream_options):
        """Sets the stream_options of this CreateCompletionRequest.


        :param stream_options: The stream_options of this CreateCompletionRequest.  # noqa: E501
        :type: ChatCompletionStreamOptions
        """

        self._stream_options = stream_options

    @property
    def suffix(self):
        """Gets the suffix of this CreateCompletionRequest.  # noqa: E501

        The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`.   # noqa: E501

        :return: The suffix of this CreateCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CreateCompletionRequest.

        The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`.   # noqa: E501

        :param suffix: The suffix of this CreateCompletionRequest.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def temperature(self):
        """Gets the temperature of this CreateCompletionRequest.  # noqa: E501

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.   # noqa: E501

        :return: The temperature of this CreateCompletionRequest.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this CreateCompletionRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.   # noqa: E501

        :param temperature: The temperature of this CreateCompletionRequest.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this CreateCompletionRequest.  # noqa: E501

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.   # noqa: E501

        :return: The top_p of this CreateCompletionRequest.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this CreateCompletionRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.   # noqa: E501

        :param top_p: The top_p of this CreateCompletionRequest.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    @property
    def user(self):
        """Gets the user of this CreateCompletionRequest.  # noqa: E501

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :return: The user of this CreateCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateCompletionRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :param user: The user of this CreateCompletionRequest.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCompletionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCompletionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenAIFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'bytes': 'int',
        'created_at': 'int',
        'filename': 'str',
        'object': 'str',
        'purpose': 'str',
        'status': 'str',
        'status_details': 'str'
    }

    attribute_map = {
        'id': 'id',
        'bytes': 'bytes',
        'created_at': 'created_at',
        'filename': 'filename',
        'object': 'object',
        'purpose': 'purpose',
        'status': 'status',
        'status_details': 'status_details'
    }

    def __init__(self, id=None, bytes=None, created_at=None, filename=None, object=None, purpose=None, status=None, status_details=None):  # noqa: E501
        """OpenAIFile - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._bytes = None
        self._created_at = None
        self._filename = None
        self._object = None
        self._purpose = None
        self._status = None
        self._status_details = None
        self.discriminator = None
        self.id = id
        self.bytes = bytes
        self.created_at = created_at
        self.filename = filename
        self.object = object
        self.purpose = purpose
        self.status = status
        if status_details is not None:
            self.status_details = status_details

    @property
    def id(self):
        """Gets the id of this OpenAIFile.  # noqa: E501

        The file identifier, which can be referenced in the API endpoints.  # noqa: E501

        :return: The id of this OpenAIFile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenAIFile.

        The file identifier, which can be referenced in the API endpoints.  # noqa: E501

        :param id: The id of this OpenAIFile.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def bytes(self):
        """Gets the bytes of this OpenAIFile.  # noqa: E501

        The size of the file, in bytes.  # noqa: E501

        :return: The bytes of this OpenAIFile.  # noqa: E501
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this OpenAIFile.

        The size of the file, in bytes.  # noqa: E501

        :param bytes: The bytes of this OpenAIFile.  # noqa: E501
        :type: int
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")  # noqa: E501

        self._bytes = bytes

    @property
    def created_at(self):
        """Gets the created_at of this OpenAIFile.  # noqa: E501

        The Unix timestamp (in seconds) for when the file was created.  # noqa: E501

        :return: The created_at of this OpenAIFile.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OpenAIFile.

        The Unix timestamp (in seconds) for when the file was created.  # noqa: E501

        :param created_at: The created_at of this OpenAIFile.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def filename(self):
        """Gets the filename of this OpenAIFile.  # noqa: E501

        The name of the file.  # noqa: E501

        :return: The filename of this OpenAIFile.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this OpenAIFile.

        The name of the file.  # noqa: E501

        :param filename: The filename of this OpenAIFile.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def object(self):
        """Gets the object of this OpenAIFile.  # noqa: E501

        The object type, which is always `file`.  # noqa: E501

        :return: The object of this OpenAIFile.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this OpenAIFile.

        The object type, which is always `file`.  # noqa: E501

        :param object: The object of this OpenAIFile.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["file"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def purpose(self):
        """Gets the purpose of this OpenAIFile.  # noqa: E501

        The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.  # noqa: E501

        :return: The purpose of this OpenAIFile.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this OpenAIFile.

        The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.  # noqa: E501

        :param purpose: The purpose of this OpenAIFile.  # noqa: E501
        :type: str
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")  # noqa: E501
        allowed_values = ["assistants", "assistants_output", "batch", "batch_output", "fine-tune", "fine-tune-results", "vision"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"  # noqa: E501
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def status(self):
        """Gets the status of this OpenAIFile.  # noqa: E501

        Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.  # noqa: E501

        :return: The status of this OpenAIFile.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OpenAIFile.

        Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.  # noqa: E501

        :param status: The status of this OpenAIFile.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["uploaded", "processed", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this OpenAIFile.  # noqa: E501

        Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.  # noqa: E501

        :return: The status_details of this OpenAIFile.  # noqa: E501
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this OpenAIFile.

        Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.  # noqa: E501

        :param status_details: The status_details of this OpenAIFile.  # noqa: E501
        :type: str
        """

        self._status_details = status_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenAIFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenAIFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

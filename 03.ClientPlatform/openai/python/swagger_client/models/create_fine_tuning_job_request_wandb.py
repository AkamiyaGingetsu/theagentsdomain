# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateFineTuningJobRequestWandb(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'str',
        'name': 'str',
        'entity': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'project': 'project',
        'name': 'name',
        'entity': 'entity',
        'tags': 'tags'
    }

    def __init__(self, project=None, name=None, entity=None, tags=None):  # noqa: E501
        """CreateFineTuningJobRequestWandb - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._name = None
        self._entity = None
        self._tags = None
        self.discriminator = None
        self.project = project
        if name is not None:
            self.name = name
        if entity is not None:
            self.entity = entity
        if tags is not None:
            self.tags = tags

    @property
    def project(self):
        """Gets the project of this CreateFineTuningJobRequestWandb.  # noqa: E501

        The name of the project that the new run will be created under.   # noqa: E501

        :return: The project of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CreateFineTuningJobRequestWandb.

        The name of the project that the new run will be created under.   # noqa: E501

        :param project: The project of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :type: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def name(self):
        """Gets the name of this CreateFineTuningJobRequestWandb.  # noqa: E501

        A display name to set for the run. If not set, we will use the Job ID as the name.   # noqa: E501

        :return: The name of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFineTuningJobRequestWandb.

        A display name to set for the run. If not set, we will use the Job ID as the name.   # noqa: E501

        :param name: The name of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def entity(self):
        """Gets the entity of this CreateFineTuningJobRequestWandb.  # noqa: E501

        The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.   # noqa: E501

        :return: The entity of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CreateFineTuningJobRequestWandb.

        The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.   # noqa: E501

        :param entity: The entity of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def tags(self):
        """Gets the tags of this CreateFineTuningJobRequestWandb.  # noqa: E501

        A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".   # noqa: E501

        :return: The tags of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFineTuningJobRequestWandb.

        A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".   # noqa: E501

        :param tags: The tags of this CreateFineTuningJobRequestWandb.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFineTuningJobRequestWandb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFineTuningJobRequestWandb):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

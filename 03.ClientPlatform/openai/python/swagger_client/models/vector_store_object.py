# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VectorStoreObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'created_at': 'int',
        'name': 'str',
        'usage_bytes': 'int',
        'file_counts': 'VectorStoreObjectFileCounts',
        'status': 'str',
        'expires_after': 'VectorStoreExpirationAfter',
        'expires_at': 'int',
        'last_active_at': 'int',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'created_at': 'created_at',
        'name': 'name',
        'usage_bytes': 'usage_bytes',
        'file_counts': 'file_counts',
        'status': 'status',
        'expires_after': 'expires_after',
        'expires_at': 'expires_at',
        'last_active_at': 'last_active_at',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, object=None, created_at=None, name=None, usage_bytes=None, file_counts=None, status=None, expires_after=None, expires_at=None, last_active_at=None, metadata=None):  # noqa: E501
        """VectorStoreObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._created_at = None
        self._name = None
        self._usage_bytes = None
        self._file_counts = None
        self._status = None
        self._expires_after = None
        self._expires_at = None
        self._last_active_at = None
        self._metadata = None
        self.discriminator = None
        self.id = id
        self.object = object
        self.created_at = created_at
        self.name = name
        self.usage_bytes = usage_bytes
        self.file_counts = file_counts
        self.status = status
        if expires_after is not None:
            self.expires_after = expires_after
        if expires_at is not None:
            self.expires_at = expires_at
        self.last_active_at = last_active_at
        self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this VectorStoreObject.  # noqa: E501

        The identifier, which can be referenced in API endpoints.  # noqa: E501

        :return: The id of this VectorStoreObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VectorStoreObject.

        The identifier, which can be referenced in API endpoints.  # noqa: E501

        :param id: The id of this VectorStoreObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object(self):
        """Gets the object of this VectorStoreObject.  # noqa: E501

        The object type, which is always `vector_store`.  # noqa: E501

        :return: The object of this VectorStoreObject.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this VectorStoreObject.

        The object type, which is always `vector_store`.  # noqa: E501

        :param object: The object of this VectorStoreObject.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["vector_store"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def created_at(self):
        """Gets the created_at of this VectorStoreObject.  # noqa: E501

        The Unix timestamp (in seconds) for when the vector store was created.  # noqa: E501

        :return: The created_at of this VectorStoreObject.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VectorStoreObject.

        The Unix timestamp (in seconds) for when the vector store was created.  # noqa: E501

        :param created_at: The created_at of this VectorStoreObject.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def name(self):
        """Gets the name of this VectorStoreObject.  # noqa: E501

        The name of the vector store.  # noqa: E501

        :return: The name of this VectorStoreObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VectorStoreObject.

        The name of the vector store.  # noqa: E501

        :param name: The name of this VectorStoreObject.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def usage_bytes(self):
        """Gets the usage_bytes of this VectorStoreObject.  # noqa: E501

        The total number of bytes used by the files in the vector store.  # noqa: E501

        :return: The usage_bytes of this VectorStoreObject.  # noqa: E501
        :rtype: int
        """
        return self._usage_bytes

    @usage_bytes.setter
    def usage_bytes(self, usage_bytes):
        """Sets the usage_bytes of this VectorStoreObject.

        The total number of bytes used by the files in the vector store.  # noqa: E501

        :param usage_bytes: The usage_bytes of this VectorStoreObject.  # noqa: E501
        :type: int
        """
        if usage_bytes is None:
            raise ValueError("Invalid value for `usage_bytes`, must not be `None`")  # noqa: E501

        self._usage_bytes = usage_bytes

    @property
    def file_counts(self):
        """Gets the file_counts of this VectorStoreObject.  # noqa: E501


        :return: The file_counts of this VectorStoreObject.  # noqa: E501
        :rtype: VectorStoreObjectFileCounts
        """
        return self._file_counts

    @file_counts.setter
    def file_counts(self, file_counts):
        """Sets the file_counts of this VectorStoreObject.


        :param file_counts: The file_counts of this VectorStoreObject.  # noqa: E501
        :type: VectorStoreObjectFileCounts
        """
        if file_counts is None:
            raise ValueError("Invalid value for `file_counts`, must not be `None`")  # noqa: E501

        self._file_counts = file_counts

    @property
    def status(self):
        """Gets the status of this VectorStoreObject.  # noqa: E501

        The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.  # noqa: E501

        :return: The status of this VectorStoreObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VectorStoreObject.

        The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.  # noqa: E501

        :param status: The status of this VectorStoreObject.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["expired", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def expires_after(self):
        """Gets the expires_after of this VectorStoreObject.  # noqa: E501


        :return: The expires_after of this VectorStoreObject.  # noqa: E501
        :rtype: VectorStoreExpirationAfter
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after):
        """Sets the expires_after of this VectorStoreObject.


        :param expires_after: The expires_after of this VectorStoreObject.  # noqa: E501
        :type: VectorStoreExpirationAfter
        """

        self._expires_after = expires_after

    @property
    def expires_at(self):
        """Gets the expires_at of this VectorStoreObject.  # noqa: E501

        The Unix timestamp (in seconds) for when the vector store will expire.  # noqa: E501

        :return: The expires_at of this VectorStoreObject.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this VectorStoreObject.

        The Unix timestamp (in seconds) for when the vector store will expire.  # noqa: E501

        :param expires_at: The expires_at of this VectorStoreObject.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    @property
    def last_active_at(self):
        """Gets the last_active_at of this VectorStoreObject.  # noqa: E501

        The Unix timestamp (in seconds) for when the vector store was last active.  # noqa: E501

        :return: The last_active_at of this VectorStoreObject.  # noqa: E501
        :rtype: int
        """
        return self._last_active_at

    @last_active_at.setter
    def last_active_at(self, last_active_at):
        """Sets the last_active_at of this VectorStoreObject.

        The Unix timestamp (in seconds) for when the vector store was last active.  # noqa: E501

        :param last_active_at: The last_active_at of this VectorStoreObject.  # noqa: E501
        :type: int
        """
        if last_active_at is None:
            raise ValueError("Invalid value for `last_active_at`, must not be `None`")  # noqa: E501

        self._last_active_at = last_active_at

    @property
    def metadata(self):
        """Gets the metadata of this VectorStoreObject.  # noqa: E501

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this VectorStoreObject.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VectorStoreObject.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this VectorStoreObject.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VectorStoreObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VectorStoreObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModifyAssistantRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'AnyOfModifyAssistantRequestModel',
        'name': 'str',
        'description': 'str',
        'instructions': 'str',
        'tools': 'list[OneOfModifyAssistantRequestToolsItems]',
        'tool_resources': 'ModifyAssistantRequestToolResources',
        'metadata': 'object',
        'temperature': 'float',
        'top_p': 'float',
        'response_format': 'AssistantsApiResponseFormatOption'
    }

    attribute_map = {
        'model': 'model',
        'name': 'name',
        'description': 'description',
        'instructions': 'instructions',
        'tools': 'tools',
        'tool_resources': 'tool_resources',
        'metadata': 'metadata',
        'temperature': 'temperature',
        'top_p': 'top_p',
        'response_format': 'response_format'
    }

    def __init__(self, model=None, name=None, description=None, instructions=None, tools=None, tool_resources=None, metadata=None, temperature=1, top_p=1, response_format=None):  # noqa: E501
        """ModifyAssistantRequest - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._name = None
        self._description = None
        self._instructions = None
        self._tools = None
        self._tool_resources = None
        self._metadata = None
        self._temperature = None
        self._top_p = None
        self._response_format = None
        self.discriminator = None
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if instructions is not None:
            self.instructions = instructions
        if tools is not None:
            self.tools = tools
        if tool_resources is not None:
            self.tool_resources = tool_resources
        if metadata is not None:
            self.metadata = metadata
        if temperature is not None:
            self.temperature = temperature
        if top_p is not None:
            self.top_p = top_p
        if response_format is not None:
            self.response_format = response_format

    @property
    def model(self):
        """Gets the model of this ModifyAssistantRequest.  # noqa: E501

        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.   # noqa: E501

        :return: The model of this ModifyAssistantRequest.  # noqa: E501
        :rtype: AnyOfModifyAssistantRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModifyAssistantRequest.

        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.   # noqa: E501

        :param model: The model of this ModifyAssistantRequest.  # noqa: E501
        :type: AnyOfModifyAssistantRequestModel
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this ModifyAssistantRequest.  # noqa: E501

        The name of the assistant. The maximum length is 256 characters.   # noqa: E501

        :return: The name of this ModifyAssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModifyAssistantRequest.

        The name of the assistant. The maximum length is 256 characters.   # noqa: E501

        :param name: The name of this ModifyAssistantRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ModifyAssistantRequest.  # noqa: E501

        The description of the assistant. The maximum length is 512 characters.   # noqa: E501

        :return: The description of this ModifyAssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModifyAssistantRequest.

        The description of the assistant. The maximum length is 512 characters.   # noqa: E501

        :param description: The description of this ModifyAssistantRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def instructions(self):
        """Gets the instructions of this ModifyAssistantRequest.  # noqa: E501

        The system instructions that the assistant uses. The maximum length is 256,000 characters.   # noqa: E501

        :return: The instructions of this ModifyAssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this ModifyAssistantRequest.

        The system instructions that the assistant uses. The maximum length is 256,000 characters.   # noqa: E501

        :param instructions: The instructions of this ModifyAssistantRequest.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def tools(self):
        """Gets the tools of this ModifyAssistantRequest.  # noqa: E501

        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.   # noqa: E501

        :return: The tools of this ModifyAssistantRequest.  # noqa: E501
        :rtype: list[OneOfModifyAssistantRequestToolsItems]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this ModifyAssistantRequest.

        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.   # noqa: E501

        :param tools: The tools of this ModifyAssistantRequest.  # noqa: E501
        :type: list[OneOfModifyAssistantRequestToolsItems]
        """

        self._tools = tools

    @property
    def tool_resources(self):
        """Gets the tool_resources of this ModifyAssistantRequest.  # noqa: E501


        :return: The tool_resources of this ModifyAssistantRequest.  # noqa: E501
        :rtype: ModifyAssistantRequestToolResources
        """
        return self._tool_resources

    @tool_resources.setter
    def tool_resources(self, tool_resources):
        """Sets the tool_resources of this ModifyAssistantRequest.


        :param tool_resources: The tool_resources of this ModifyAssistantRequest.  # noqa: E501
        :type: ModifyAssistantRequestToolResources
        """

        self._tool_resources = tool_resources

    @property
    def metadata(self):
        """Gets the metadata of this ModifyAssistantRequest.  # noqa: E501

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this ModifyAssistantRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ModifyAssistantRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this ModifyAssistantRequest.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def temperature(self):
        """Gets the temperature of this ModifyAssistantRequest.  # noqa: E501

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.   # noqa: E501

        :return: The temperature of this ModifyAssistantRequest.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this ModifyAssistantRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.   # noqa: E501

        :param temperature: The temperature of this ModifyAssistantRequest.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this ModifyAssistantRequest.  # noqa: E501

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.   # noqa: E501

        :return: The top_p of this ModifyAssistantRequest.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this ModifyAssistantRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.   # noqa: E501

        :param top_p: The top_p of this ModifyAssistantRequest.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    @property
    def response_format(self):
        """Gets the response_format of this ModifyAssistantRequest.  # noqa: E501


        :return: The response_format of this ModifyAssistantRequest.  # noqa: E501
        :rtype: AssistantsApiResponseFormatOption
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """Sets the response_format of this ModifyAssistantRequest.


        :param response_format: The response_format of this ModifyAssistantRequest.  # noqa: E501
        :type: AssistantsApiResponseFormatOption
        """

        self._response_format = response_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyAssistantRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyAssistantRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

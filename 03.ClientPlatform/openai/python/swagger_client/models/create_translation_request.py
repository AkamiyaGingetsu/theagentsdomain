# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTranslationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'model': 'AnyOfCreateTranslationRequestModel',
        'prompt': 'str',
        'response_format': 'str',
        'temperature': 'float'
    }

    attribute_map = {
        'file': 'file',
        'model': 'model',
        'prompt': 'prompt',
        'response_format': 'response_format',
        'temperature': 'temperature'
    }

    def __init__(self, file=None, model=None, prompt=None, response_format='json', temperature=0):  # noqa: E501
        """CreateTranslationRequest - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._model = None
        self._prompt = None
        self._response_format = None
        self._temperature = None
        self.discriminator = None
        self.file = file
        self.model = model
        if prompt is not None:
            self.prompt = prompt
        if response_format is not None:
            self.response_format = response_format
        if temperature is not None:
            self.temperature = temperature

    @property
    def file(self):
        """Gets the file of this CreateTranslationRequest.  # noqa: E501

        The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.   # noqa: E501

        :return: The file of this CreateTranslationRequest.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this CreateTranslationRequest.

        The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.   # noqa: E501

        :param file: The file of this CreateTranslationRequest.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def model(self):
        """Gets the model of this CreateTranslationRequest.  # noqa: E501

        ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.   # noqa: E501

        :return: The model of this CreateTranslationRequest.  # noqa: E501
        :rtype: AnyOfCreateTranslationRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateTranslationRequest.

        ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.   # noqa: E501

        :param model: The model of this CreateTranslationRequest.  # noqa: E501
        :type: AnyOfCreateTranslationRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def prompt(self):
        """Gets the prompt of this CreateTranslationRequest.  # noqa: E501

        An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.   # noqa: E501

        :return: The prompt of this CreateTranslationRequest.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this CreateTranslationRequest.

        An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.   # noqa: E501

        :param prompt: The prompt of this CreateTranslationRequest.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def response_format(self):
        """Gets the response_format of this CreateTranslationRequest.  # noqa: E501

        The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.   # noqa: E501

        :return: The response_format of this CreateTranslationRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """Sets the response_format of this CreateTranslationRequest.

        The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.   # noqa: E501

        :param response_format: The response_format of this CreateTranslationRequest.  # noqa: E501
        :type: str
        """

        self._response_format = response_format

    @property
    def temperature(self):
        """Gets the temperature of this CreateTranslationRequest.  # noqa: E501

        The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.   # noqa: E501

        :return: The temperature of this CreateTranslationRequest.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this CreateTranslationRequest.

        The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.   # noqa: E501

        :param temperature: The temperature of this CreateTranslationRequest.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTranslationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTranslationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

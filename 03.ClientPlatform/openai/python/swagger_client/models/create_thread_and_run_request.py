# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateThreadAndRunRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assistant_id': 'str',
        'thread': 'CreateThreadRequest',
        'model': 'AnyOfCreateThreadAndRunRequestModel',
        'instructions': 'str',
        'tools': 'list[OneOfCreateThreadAndRunRequestToolsItems]',
        'tool_resources': 'CreateThreadAndRunRequestToolResources',
        'metadata': 'object',
        'temperature': 'float',
        'top_p': 'float',
        'stream': 'bool',
        'max_prompt_tokens': 'int',
        'max_completion_tokens': 'int',
        'truncation_strategy': 'TruncationObject',
        'tool_choice': 'AssistantsApiToolChoiceOption',
        'response_format': 'AssistantsApiResponseFormatOption'
    }

    attribute_map = {
        'assistant_id': 'assistant_id',
        'thread': 'thread',
        'model': 'model',
        'instructions': 'instructions',
        'tools': 'tools',
        'tool_resources': 'tool_resources',
        'metadata': 'metadata',
        'temperature': 'temperature',
        'top_p': 'top_p',
        'stream': 'stream',
        'max_prompt_tokens': 'max_prompt_tokens',
        'max_completion_tokens': 'max_completion_tokens',
        'truncation_strategy': 'truncation_strategy',
        'tool_choice': 'tool_choice',
        'response_format': 'response_format'
    }

    def __init__(self, assistant_id=None, thread=None, model=None, instructions=None, tools=None, tool_resources=None, metadata=None, temperature=1, top_p=1, stream=None, max_prompt_tokens=None, max_completion_tokens=None, truncation_strategy=None, tool_choice=None, response_format=None):  # noqa: E501
        """CreateThreadAndRunRequest - a model defined in Swagger"""  # noqa: E501
        self._assistant_id = None
        self._thread = None
        self._model = None
        self._instructions = None
        self._tools = None
        self._tool_resources = None
        self._metadata = None
        self._temperature = None
        self._top_p = None
        self._stream = None
        self._max_prompt_tokens = None
        self._max_completion_tokens = None
        self._truncation_strategy = None
        self._tool_choice = None
        self._response_format = None
        self.discriminator = None
        self.assistant_id = assistant_id
        if thread is not None:
            self.thread = thread
        if model is not None:
            self.model = model
        if instructions is not None:
            self.instructions = instructions
        if tools is not None:
            self.tools = tools
        if tool_resources is not None:
            self.tool_resources = tool_resources
        if metadata is not None:
            self.metadata = metadata
        if temperature is not None:
            self.temperature = temperature
        if top_p is not None:
            self.top_p = top_p
        if stream is not None:
            self.stream = stream
        if max_prompt_tokens is not None:
            self.max_prompt_tokens = max_prompt_tokens
        if max_completion_tokens is not None:
            self.max_completion_tokens = max_completion_tokens
        if truncation_strategy is not None:
            self.truncation_strategy = truncation_strategy
        if tool_choice is not None:
            self.tool_choice = tool_choice
        if response_format is not None:
            self.response_format = response_format

    @property
    def assistant_id(self):
        """Gets the assistant_id of this CreateThreadAndRunRequest.  # noqa: E501

        The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.  # noqa: E501

        :return: The assistant_id of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this CreateThreadAndRunRequest.

        The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.  # noqa: E501

        :param assistant_id: The assistant_id of this CreateThreadAndRunRequest.  # noqa: E501
        :type: str
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")  # noqa: E501

        self._assistant_id = assistant_id

    @property
    def thread(self):
        """Gets the thread of this CreateThreadAndRunRequest.  # noqa: E501


        :return: The thread of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: CreateThreadRequest
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this CreateThreadAndRunRequest.


        :param thread: The thread of this CreateThreadAndRunRequest.  # noqa: E501
        :type: CreateThreadRequest
        """

        self._thread = thread

    @property
    def model(self):
        """Gets the model of this CreateThreadAndRunRequest.  # noqa: E501

        The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.  # noqa: E501

        :return: The model of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: AnyOfCreateThreadAndRunRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateThreadAndRunRequest.

        The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.  # noqa: E501

        :param model: The model of this CreateThreadAndRunRequest.  # noqa: E501
        :type: AnyOfCreateThreadAndRunRequestModel
        """

        self._model = model

    @property
    def instructions(self):
        """Gets the instructions of this CreateThreadAndRunRequest.  # noqa: E501

        Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.  # noqa: E501

        :return: The instructions of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this CreateThreadAndRunRequest.

        Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.  # noqa: E501

        :param instructions: The instructions of this CreateThreadAndRunRequest.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def tools(self):
        """Gets the tools of this CreateThreadAndRunRequest.  # noqa: E501

        Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.  # noqa: E501

        :return: The tools of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: list[OneOfCreateThreadAndRunRequestToolsItems]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this CreateThreadAndRunRequest.

        Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.  # noqa: E501

        :param tools: The tools of this CreateThreadAndRunRequest.  # noqa: E501
        :type: list[OneOfCreateThreadAndRunRequestToolsItems]
        """

        self._tools = tools

    @property
    def tool_resources(self):
        """Gets the tool_resources of this CreateThreadAndRunRequest.  # noqa: E501


        :return: The tool_resources of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: CreateThreadAndRunRequestToolResources
        """
        return self._tool_resources

    @tool_resources.setter
    def tool_resources(self, tool_resources):
        """Sets the tool_resources of this CreateThreadAndRunRequest.


        :param tool_resources: The tool_resources of this CreateThreadAndRunRequest.  # noqa: E501
        :type: CreateThreadAndRunRequestToolResources
        """

        self._tool_resources = tool_resources

    @property
    def metadata(self):
        """Gets the metadata of this CreateThreadAndRunRequest.  # noqa: E501

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateThreadAndRunRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this CreateThreadAndRunRequest.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def temperature(self):
        """Gets the temperature of this CreateThreadAndRunRequest.  # noqa: E501

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.   # noqa: E501

        :return: The temperature of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this CreateThreadAndRunRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.   # noqa: E501

        :param temperature: The temperature of this CreateThreadAndRunRequest.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this CreateThreadAndRunRequest.  # noqa: E501

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.   # noqa: E501

        :return: The top_p of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this CreateThreadAndRunRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.   # noqa: E501

        :param top_p: The top_p of this CreateThreadAndRunRequest.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    @property
    def stream(self):
        """Gets the stream of this CreateThreadAndRunRequest.  # noqa: E501

        If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.   # noqa: E501

        :return: The stream of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this CreateThreadAndRunRequest.

        If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.   # noqa: E501

        :param stream: The stream of this CreateThreadAndRunRequest.  # noqa: E501
        :type: bool
        """

        self._stream = stream

    @property
    def max_prompt_tokens(self):
        """Gets the max_prompt_tokens of this CreateThreadAndRunRequest.  # noqa: E501

        The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.   # noqa: E501

        :return: The max_prompt_tokens of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_prompt_tokens

    @max_prompt_tokens.setter
    def max_prompt_tokens(self, max_prompt_tokens):
        """Sets the max_prompt_tokens of this CreateThreadAndRunRequest.

        The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.   # noqa: E501

        :param max_prompt_tokens: The max_prompt_tokens of this CreateThreadAndRunRequest.  # noqa: E501
        :type: int
        """

        self._max_prompt_tokens = max_prompt_tokens

    @property
    def max_completion_tokens(self):
        """Gets the max_completion_tokens of this CreateThreadAndRunRequest.  # noqa: E501

        The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.   # noqa: E501

        :return: The max_completion_tokens of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_completion_tokens

    @max_completion_tokens.setter
    def max_completion_tokens(self, max_completion_tokens):
        """Sets the max_completion_tokens of this CreateThreadAndRunRequest.

        The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.   # noqa: E501

        :param max_completion_tokens: The max_completion_tokens of this CreateThreadAndRunRequest.  # noqa: E501
        :type: int
        """

        self._max_completion_tokens = max_completion_tokens

    @property
    def truncation_strategy(self):
        """Gets the truncation_strategy of this CreateThreadAndRunRequest.  # noqa: E501


        :return: The truncation_strategy of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: TruncationObject
        """
        return self._truncation_strategy

    @truncation_strategy.setter
    def truncation_strategy(self, truncation_strategy):
        """Sets the truncation_strategy of this CreateThreadAndRunRequest.


        :param truncation_strategy: The truncation_strategy of this CreateThreadAndRunRequest.  # noqa: E501
        :type: TruncationObject
        """

        self._truncation_strategy = truncation_strategy

    @property
    def tool_choice(self):
        """Gets the tool_choice of this CreateThreadAndRunRequest.  # noqa: E501


        :return: The tool_choice of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: AssistantsApiToolChoiceOption
        """
        return self._tool_choice

    @tool_choice.setter
    def tool_choice(self, tool_choice):
        """Sets the tool_choice of this CreateThreadAndRunRequest.


        :param tool_choice: The tool_choice of this CreateThreadAndRunRequest.  # noqa: E501
        :type: AssistantsApiToolChoiceOption
        """

        self._tool_choice = tool_choice

    @property
    def response_format(self):
        """Gets the response_format of this CreateThreadAndRunRequest.  # noqa: E501


        :return: The response_format of this CreateThreadAndRunRequest.  # noqa: E501
        :rtype: AssistantsApiResponseFormatOption
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """Sets the response_format of this CreateThreadAndRunRequest.


        :param response_format: The response_format of this CreateThreadAndRunRequest.  # noqa: E501
        :type: AssistantsApiResponseFormatOption
        """

        self._response_format = response_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateThreadAndRunRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateThreadAndRunRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

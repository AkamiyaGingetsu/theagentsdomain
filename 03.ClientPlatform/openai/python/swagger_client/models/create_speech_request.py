# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateSpeechRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'AnyOfCreateSpeechRequestModel',
        'input': 'str',
        'voice': 'str',
        'response_format': 'str',
        'speed': 'float'
    }

    attribute_map = {
        'model': 'model',
        'input': 'input',
        'voice': 'voice',
        'response_format': 'response_format',
        'speed': 'speed'
    }

    def __init__(self, model=None, input=None, voice=None, response_format='mp3', speed=1.0):  # noqa: E501
        """CreateSpeechRequest - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._input = None
        self._voice = None
        self._response_format = None
        self._speed = None
        self.discriminator = None
        self.model = model
        self.input = input
        self.voice = voice
        if response_format is not None:
            self.response_format = response_format
        if speed is not None:
            self.speed = speed

    @property
    def model(self):
        """Gets the model of this CreateSpeechRequest.  # noqa: E501

        One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`   # noqa: E501

        :return: The model of this CreateSpeechRequest.  # noqa: E501
        :rtype: AnyOfCreateSpeechRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateSpeechRequest.

        One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`   # noqa: E501

        :param model: The model of this CreateSpeechRequest.  # noqa: E501
        :type: AnyOfCreateSpeechRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def input(self):
        """Gets the input of this CreateSpeechRequest.  # noqa: E501

        The text to generate audio for. The maximum length is 4096 characters.  # noqa: E501

        :return: The input of this CreateSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this CreateSpeechRequest.

        The text to generate audio for. The maximum length is 4096 characters.  # noqa: E501

        :param input: The input of this CreateSpeechRequest.  # noqa: E501
        :type: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def voice(self):
        """Gets the voice of this CreateSpeechRequest.  # noqa: E501

        The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).  # noqa: E501

        :return: The voice of this CreateSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this CreateSpeechRequest.

        The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).  # noqa: E501

        :param voice: The voice of this CreateSpeechRequest.  # noqa: E501
        :type: str
        """
        if voice is None:
            raise ValueError("Invalid value for `voice`, must not be `None`")  # noqa: E501
        allowed_values = ["alloy", "echo", "fable", "onyx", "nova", "shimmer"]  # noqa: E501
        if voice not in allowed_values:
            raise ValueError(
                "Invalid value for `voice` ({0}), must be one of {1}"  # noqa: E501
                .format(voice, allowed_values)
            )

        self._voice = voice

    @property
    def response_format(self):
        """Gets the response_format of this CreateSpeechRequest.  # noqa: E501

        The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.  # noqa: E501

        :return: The response_format of this CreateSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """Sets the response_format of this CreateSpeechRequest.

        The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.  # noqa: E501

        :param response_format: The response_format of this CreateSpeechRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["mp3", "opus", "aac", "flac", "wav", "pcm"]  # noqa: E501
        if response_format not in allowed_values:
            raise ValueError(
                "Invalid value for `response_format` ({0}), must be one of {1}"  # noqa: E501
                .format(response_format, allowed_values)
            )

        self._response_format = response_format

    @property
    def speed(self):
        """Gets the speed of this CreateSpeechRequest.  # noqa: E501

        The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.  # noqa: E501

        :return: The speed of this CreateSpeechRequest.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this CreateSpeechRequest.

        The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.  # noqa: E501

        :param speed: The speed of this CreateSpeechRequest.  # noqa: E501
        :type: float
        """

        self._speed = speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSpeechRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSpeechRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

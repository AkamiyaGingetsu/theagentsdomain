# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VectorStoreExpirationAfter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchor': 'str',
        'days': 'int'
    }

    attribute_map = {
        'anchor': 'anchor',
        'days': 'days'
    }

    def __init__(self, anchor=None, days=None):  # noqa: E501
        """VectorStoreExpirationAfter - a model defined in Swagger"""  # noqa: E501
        self._anchor = None
        self._days = None
        self.discriminator = None
        self.anchor = anchor
        self.days = days

    @property
    def anchor(self):
        """Gets the anchor of this VectorStoreExpirationAfter.  # noqa: E501

        Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.  # noqa: E501

        :return: The anchor of this VectorStoreExpirationAfter.  # noqa: E501
        :rtype: str
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this VectorStoreExpirationAfter.

        Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.  # noqa: E501

        :param anchor: The anchor of this VectorStoreExpirationAfter.  # noqa: E501
        :type: str
        """
        if anchor is None:
            raise ValueError("Invalid value for `anchor`, must not be `None`")  # noqa: E501
        allowed_values = ["last_active_at"]  # noqa: E501
        if anchor not in allowed_values:
            raise ValueError(
                "Invalid value for `anchor` ({0}), must be one of {1}"  # noqa: E501
                .format(anchor, allowed_values)
            )

        self._anchor = anchor

    @property
    def days(self):
        """Gets the days of this VectorStoreExpirationAfter.  # noqa: E501

        The number of days after the anchor time that the vector store will expire.  # noqa: E501

        :return: The days of this VectorStoreExpirationAfter.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this VectorStoreExpirationAfter.

        The number of days after the anchor time that the vector store will expire.  # noqa: E501

        :param days: The days of this VectorStoreExpirationAfter.  # noqa: E501
        :type: int
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VectorStoreExpirationAfter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VectorStoreExpirationAfter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

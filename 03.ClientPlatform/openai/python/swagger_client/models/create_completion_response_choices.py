# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCompletionResponseChoices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'finish_reason': 'str',
        'index': 'int',
        'logprobs': 'CreateCompletionResponseLogprobs',
        'text': 'str'
    }

    attribute_map = {
        'finish_reason': 'finish_reason',
        'index': 'index',
        'logprobs': 'logprobs',
        'text': 'text'
    }

    def __init__(self, finish_reason=None, index=None, logprobs=None, text=None):  # noqa: E501
        """CreateCompletionResponseChoices - a model defined in Swagger"""  # noqa: E501
        self._finish_reason = None
        self._index = None
        self._logprobs = None
        self._text = None
        self.discriminator = None
        self.finish_reason = finish_reason
        self.index = index
        self.logprobs = logprobs
        self.text = text

    @property
    def finish_reason(self):
        """Gets the finish_reason of this CreateCompletionResponseChoices.  # noqa: E501

        The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters.   # noqa: E501

        :return: The finish_reason of this CreateCompletionResponseChoices.  # noqa: E501
        :rtype: str
        """
        return self._finish_reason

    @finish_reason.setter
    def finish_reason(self, finish_reason):
        """Sets the finish_reason of this CreateCompletionResponseChoices.

        The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters.   # noqa: E501

        :param finish_reason: The finish_reason of this CreateCompletionResponseChoices.  # noqa: E501
        :type: str
        """
        if finish_reason is None:
            raise ValueError("Invalid value for `finish_reason`, must not be `None`")  # noqa: E501
        allowed_values = ["stop", "length", "content_filter"]  # noqa: E501
        if finish_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `finish_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(finish_reason, allowed_values)
            )

        self._finish_reason = finish_reason

    @property
    def index(self):
        """Gets the index of this CreateCompletionResponseChoices.  # noqa: E501


        :return: The index of this CreateCompletionResponseChoices.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this CreateCompletionResponseChoices.


        :param index: The index of this CreateCompletionResponseChoices.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def logprobs(self):
        """Gets the logprobs of this CreateCompletionResponseChoices.  # noqa: E501


        :return: The logprobs of this CreateCompletionResponseChoices.  # noqa: E501
        :rtype: CreateCompletionResponseLogprobs
        """
        return self._logprobs

    @logprobs.setter
    def logprobs(self, logprobs):
        """Sets the logprobs of this CreateCompletionResponseChoices.


        :param logprobs: The logprobs of this CreateCompletionResponseChoices.  # noqa: E501
        :type: CreateCompletionResponseLogprobs
        """
        if logprobs is None:
            raise ValueError("Invalid value for `logprobs`, must not be `None`")  # noqa: E501

        self._logprobs = logprobs

    @property
    def text(self):
        """Gets the text of this CreateCompletionResponseChoices.  # noqa: E501


        :return: The text of this CreateCompletionResponseChoices.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreateCompletionResponseChoices.


        :param text: The text of this CreateCompletionResponseChoices.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCompletionResponseChoices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCompletionResponseChoices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

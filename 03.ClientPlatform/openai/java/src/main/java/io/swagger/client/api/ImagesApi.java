/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateImageRequest;
import java.io.File;
import io.swagger.client.model.ImagesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient apiClient;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createImage
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createImageCall(CreateImageRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/images/generations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createImageValidateBeforeCall(CreateImageRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createImage(Async)");
        }
        
        com.squareup.okhttp.Call call = createImageCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates an image given a prompt.
     * 
     * @param body  (required)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse createImage(CreateImageRequest body) throws ApiException {
        ApiResponse<ImagesResponse> resp = createImageWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an image given a prompt.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> createImageWithHttpInfo(CreateImageRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createImageValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an image given a prompt. (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createImageAsync(CreateImageRequest body, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createImageValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createImageEdit
     * @param image  (required)
     * @param prompt  (required)
     * @param mask  (required)
     * @param model  (required)
     * @param n  (required)
     * @param size  (required)
     * @param responseFormat  (required)
     * @param user  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createImageEditCall(File image, String prompt, File mask, Object model, Integer n, String size, String responseFormat, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/images/edits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);
        if (prompt != null)
        localVarFormParams.put("prompt", prompt);
        if (mask != null)
        localVarFormParams.put("mask", mask);
        if (model != null)
        localVarFormParams.put("model", model);
        if (n != null)
        localVarFormParams.put("n", n);
        if (size != null)
        localVarFormParams.put("size", size);
        if (responseFormat != null)
        localVarFormParams.put("response_format", responseFormat);
        if (user != null)
        localVarFormParams.put("user", user);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createImageEditValidateBeforeCall(File image, String prompt, File mask, Object model, Integer n, String size, String responseFormat, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'prompt' is set
        if (prompt == null) {
            throw new ApiException("Missing the required parameter 'prompt' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'mask' is set
        if (mask == null) {
            throw new ApiException("Missing the required parameter 'mask' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'responseFormat' is set
        if (responseFormat == null) {
            throw new ApiException("Missing the required parameter 'responseFormat' when calling createImageEdit(Async)");
        }
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling createImageEdit(Async)");
        }
        
        com.squareup.okhttp.Call call = createImageEditCall(image, prompt, mask, model, n, size, responseFormat, user, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param image  (required)
     * @param prompt  (required)
     * @param mask  (required)
     * @param model  (required)
     * @param n  (required)
     * @param size  (required)
     * @param responseFormat  (required)
     * @param user  (required)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse createImageEdit(File image, String prompt, File mask, Object model, Integer n, String size, String responseFormat, String user) throws ApiException {
        ApiResponse<ImagesResponse> resp = createImageEditWithHttpInfo(image, prompt, mask, model, n, size, responseFormat, user);
        return resp.getData();
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param image  (required)
     * @param prompt  (required)
     * @param mask  (required)
     * @param model  (required)
     * @param n  (required)
     * @param size  (required)
     * @param responseFormat  (required)
     * @param user  (required)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> createImageEditWithHttpInfo(File image, String prompt, File mask, Object model, Integer n, String size, String responseFormat, String user) throws ApiException {
        com.squareup.okhttp.Call call = createImageEditValidateBeforeCall(image, prompt, mask, model, n, size, responseFormat, user, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt. (asynchronously)
     * 
     * @param image  (required)
     * @param prompt  (required)
     * @param mask  (required)
     * @param model  (required)
     * @param n  (required)
     * @param size  (required)
     * @param responseFormat  (required)
     * @param user  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createImageEditAsync(File image, String prompt, File mask, Object model, Integer n, String size, String responseFormat, String user, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createImageEditValidateBeforeCall(image, prompt, mask, model, n, size, responseFormat, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createImageVariation
     * @param image  (required)
     * @param model  (required)
     * @param n  (required)
     * @param responseFormat  (required)
     * @param size  (required)
     * @param user  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createImageVariationCall(File image, Object model, Integer n, String responseFormat, String size, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/images/variations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);
        if (model != null)
        localVarFormParams.put("model", model);
        if (n != null)
        localVarFormParams.put("n", n);
        if (responseFormat != null)
        localVarFormParams.put("response_format", responseFormat);
        if (size != null)
        localVarFormParams.put("size", size);
        if (user != null)
        localVarFormParams.put("user", user);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createImageVariationValidateBeforeCall(File image, Object model, Integer n, String responseFormat, String size, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling createImageVariation(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling createImageVariation(Async)");
        }
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling createImageVariation(Async)");
        }
        // verify the required parameter 'responseFormat' is set
        if (responseFormat == null) {
            throw new ApiException("Missing the required parameter 'responseFormat' when calling createImageVariation(Async)");
        }
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling createImageVariation(Async)");
        }
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling createImageVariation(Async)");
        }
        
        com.squareup.okhttp.Call call = createImageVariationCall(image, model, n, responseFormat, size, user, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a variation of a given image.
     * 
     * @param image  (required)
     * @param model  (required)
     * @param n  (required)
     * @param responseFormat  (required)
     * @param size  (required)
     * @param user  (required)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse createImageVariation(File image, Object model, Integer n, String responseFormat, String size, String user) throws ApiException {
        ApiResponse<ImagesResponse> resp = createImageVariationWithHttpInfo(image, model, n, responseFormat, size, user);
        return resp.getData();
    }

    /**
     * Creates a variation of a given image.
     * 
     * @param image  (required)
     * @param model  (required)
     * @param n  (required)
     * @param responseFormat  (required)
     * @param size  (required)
     * @param user  (required)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> createImageVariationWithHttpInfo(File image, Object model, Integer n, String responseFormat, String size, String user) throws ApiException {
        com.squareup.okhttp.Call call = createImageVariationValidateBeforeCall(image, model, n, responseFormat, size, user, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a variation of a given image. (asynchronously)
     * 
     * @param image  (required)
     * @param model  (required)
     * @param n  (required)
     * @param responseFormat  (required)
     * @param size  (required)
     * @param user  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createImageVariationAsync(File image, Object model, Integer n, String responseFormat, String size, String user, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createImageVariationValidateBeforeCall(image, model, n, responseFormat, size, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

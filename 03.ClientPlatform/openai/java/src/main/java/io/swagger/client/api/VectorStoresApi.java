/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateVectorStoreFileBatchRequest;
import io.swagger.client.model.CreateVectorStoreFileRequest;
import io.swagger.client.model.CreateVectorStoreRequest;
import io.swagger.client.model.DeleteVectorStoreFileResponse;
import io.swagger.client.model.DeleteVectorStoreResponse;
import io.swagger.client.model.ListVectorStoreFilesResponse;
import io.swagger.client.model.ListVectorStoresResponse;
import io.swagger.client.model.UpdateVectorStoreRequest;
import io.swagger.client.model.VectorStoreFileBatchObject;
import io.swagger.client.model.VectorStoreFileObject;
import io.swagger.client.model.VectorStoreObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VectorStoresApi {
    private ApiClient apiClient;

    public VectorStoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VectorStoresApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelVectorStoreFileBatch
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelVectorStoreFileBatchCall(String vectorStoreId, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()))
            .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelVectorStoreFileBatchValidateBeforeCall(String vectorStoreId, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling cancelVectorStoreFileBatch(Async)");
        }
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling cancelVectorStoreFileBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelVectorStoreFileBatchCall(vectorStoreId, batchId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @return VectorStoreFileBatchObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreFileBatchObject cancelVectorStoreFileBatch(String vectorStoreId, String batchId) throws ApiException {
        ApiResponse<VectorStoreFileBatchObject> resp = cancelVectorStoreFileBatchWithHttpInfo(vectorStoreId, batchId);
        return resp.getData();
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @return ApiResponse&lt;VectorStoreFileBatchObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreFileBatchObject> cancelVectorStoreFileBatchWithHttpInfo(String vectorStoreId, String batchId) throws ApiException {
        com.squareup.okhttp.Call call = cancelVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelVectorStoreFileBatchAsync(String vectorStoreId, String batchId, final ApiCallback<VectorStoreFileBatchObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createVectorStore
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVectorStoreCall(CreateVectorStoreRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vector_stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVectorStoreValidateBeforeCall(CreateVectorStoreRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createVectorStore(Async)");
        }
        
        com.squareup.okhttp.Call call = createVectorStoreCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a vector store.
     * 
     * @param body  (required)
     * @return VectorStoreObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreObject createVectorStore(CreateVectorStoreRequest body) throws ApiException {
        ApiResponse<VectorStoreObject> resp = createVectorStoreWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a vector store.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;VectorStoreObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreObject> createVectorStoreWithHttpInfo(CreateVectorStoreRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createVectorStoreValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a vector store. (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVectorStoreAsync(CreateVectorStoreRequest body, final ApiCallback<VectorStoreObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVectorStoreValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createVectorStoreFile
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVectorStoreFileCall(CreateVectorStoreFileRequest body, String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVectorStoreFileValidateBeforeCall(CreateVectorStoreFileRequest body, String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createVectorStoreFile(Async)");
        }
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling createVectorStoreFile(Async)");
        }
        
        com.squareup.okhttp.Call call = createVectorStoreFileCall(body, vectorStoreId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @return VectorStoreFileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreFileObject createVectorStoreFile(CreateVectorStoreFileRequest body, String vectorStoreId) throws ApiException {
        ApiResponse<VectorStoreFileObject> resp = createVectorStoreFileWithHttpInfo(body, vectorStoreId);
        return resp.getData();
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @return ApiResponse&lt;VectorStoreFileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreFileObject> createVectorStoreFileWithHttpInfo(CreateVectorStoreFileRequest body, String vectorStoreId) throws ApiException {
        com.squareup.okhttp.Call call = createVectorStoreFileValidateBeforeCall(body, vectorStoreId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object). (asynchronously)
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVectorStoreFileAsync(CreateVectorStoreFileRequest body, String vectorStoreId, final ApiCallback<VectorStoreFileObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVectorStoreFileValidateBeforeCall(body, vectorStoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createVectorStoreFileBatch
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVectorStoreFileBatchCall(CreateVectorStoreFileBatchRequest body, String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVectorStoreFileBatchValidateBeforeCall(CreateVectorStoreFileBatchRequest body, String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createVectorStoreFileBatch(Async)");
        }
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling createVectorStoreFileBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = createVectorStoreFileBatchCall(body, vectorStoreId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a vector store file batch.
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @return VectorStoreFileBatchObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreFileBatchObject createVectorStoreFileBatch(CreateVectorStoreFileBatchRequest body, String vectorStoreId) throws ApiException {
        ApiResponse<VectorStoreFileBatchObject> resp = createVectorStoreFileBatchWithHttpInfo(body, vectorStoreId);
        return resp.getData();
    }

    /**
     * Create a vector store file batch.
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @return ApiResponse&lt;VectorStoreFileBatchObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreFileBatchObject> createVectorStoreFileBatchWithHttpInfo(CreateVectorStoreFileBatchRequest body, String vectorStoreId) throws ApiException {
        com.squareup.okhttp.Call call = createVectorStoreFileBatchValidateBeforeCall(body, vectorStoreId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a vector store file batch. (asynchronously)
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVectorStoreFileBatchAsync(CreateVectorStoreFileBatchRequest body, String vectorStoreId, final ApiCallback<VectorStoreFileBatchObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVectorStoreFileBatchValidateBeforeCall(body, vectorStoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteVectorStore
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVectorStoreCall(String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVectorStoreValidateBeforeCall(String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling deleteVectorStore(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteVectorStoreCall(vectorStoreId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @return DeleteVectorStoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteVectorStoreResponse deleteVectorStore(String vectorStoreId) throws ApiException {
        ApiResponse<DeleteVectorStoreResponse> resp = deleteVectorStoreWithHttpInfo(vectorStoreId);
        return resp.getData();
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @return ApiResponse&lt;DeleteVectorStoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteVectorStoreResponse> deleteVectorStoreWithHttpInfo(String vectorStoreId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVectorStoreValidateBeforeCall(vectorStoreId, null, null);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a vector store. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVectorStoreAsync(String vectorStoreId, final ApiCallback<DeleteVectorStoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVectorStoreValidateBeforeCall(vectorStoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteVectorStoreFile
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVectorStoreFileCall(String vectorStoreId, String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files/{file_id}"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVectorStoreFileValidateBeforeCall(String vectorStoreId, String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling deleteVectorStoreFile(Async)");
        }
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteVectorStoreFile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteVectorStoreFileCall(vectorStoreId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return DeleteVectorStoreFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteVectorStoreFileResponse deleteVectorStoreFile(String vectorStoreId, String fileId) throws ApiException {
        ApiResponse<DeleteVectorStoreFileResponse> resp = deleteVectorStoreFileWithHttpInfo(vectorStoreId, fileId);
        return resp.getData();
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return ApiResponse&lt;DeleteVectorStoreFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteVectorStoreFileResponse> deleteVectorStoreFileWithHttpInfo(String vectorStoreId, String fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, null, null);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreFileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVectorStoreFileAsync(String vectorStoreId, String fileId, final ApiCallback<DeleteVectorStoreFileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreFileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVectorStore
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVectorStoreCall(String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVectorStoreValidateBeforeCall(String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling getVectorStore(Async)");
        }
        
        com.squareup.okhttp.Call call = getVectorStoreCall(vectorStoreId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @return VectorStoreObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreObject getVectorStore(String vectorStoreId) throws ApiException {
        ApiResponse<VectorStoreObject> resp = getVectorStoreWithHttpInfo(vectorStoreId);
        return resp.getData();
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @return ApiResponse&lt;VectorStoreObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreObject> getVectorStoreWithHttpInfo(String vectorStoreId) throws ApiException {
        com.squareup.okhttp.Call call = getVectorStoreValidateBeforeCall(vectorStoreId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a vector store. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVectorStoreAsync(String vectorStoreId, final ApiCallback<VectorStoreObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVectorStoreValidateBeforeCall(vectorStoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVectorStoreFile
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVectorStoreFileCall(String vectorStoreId, String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files/{file_id}"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVectorStoreFileValidateBeforeCall(String vectorStoreId, String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling getVectorStoreFile(Async)");
        }
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getVectorStoreFile(Async)");
        }
        
        com.squareup.okhttp.Call call = getVectorStoreFileCall(vectorStoreId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return VectorStoreFileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreFileObject getVectorStoreFile(String vectorStoreId, String fileId) throws ApiException {
        ApiResponse<VectorStoreFileObject> resp = getVectorStoreFileWithHttpInfo(vectorStoreId, fileId);
        return resp.getData();
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return ApiResponse&lt;VectorStoreFileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreFileObject> getVectorStoreFileWithHttpInfo(String vectorStoreId, String fileId) throws ApiException {
        com.squareup.okhttp.Call call = getVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a vector store file. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVectorStoreFileAsync(String vectorStoreId, String fileId, final ApiCallback<VectorStoreFileObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVectorStoreFileBatch
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVectorStoreFileBatchCall(String vectorStoreId, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()))
            .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVectorStoreFileBatchValidateBeforeCall(String vectorStoreId, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling getVectorStoreFileBatch(Async)");
        }
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getVectorStoreFileBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = getVectorStoreFileBatchCall(vectorStoreId, batchId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @return VectorStoreFileBatchObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreFileBatchObject getVectorStoreFileBatch(String vectorStoreId, String batchId) throws ApiException {
        ApiResponse<VectorStoreFileBatchObject> resp = getVectorStoreFileBatchWithHttpInfo(vectorStoreId, batchId);
        return resp.getData();
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @return ApiResponse&lt;VectorStoreFileBatchObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreFileBatchObject> getVectorStoreFileBatchWithHttpInfo(String vectorStoreId, String batchId) throws ApiException {
        com.squareup.okhttp.Call call = getVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a vector store file batch. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVectorStoreFileBatchAsync(String vectorStoreId, String batchId, final ApiCallback<VectorStoreFileBatchObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFilesInVectorStoreBatch
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFilesInVectorStoreBatchCall(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()))
            .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFilesInVectorStoreBatchValidateBeforeCall(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling listFilesInVectorStoreBatch(Async)");
        }
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling listFilesInVectorStoreBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = listFilesInVectorStoreBatchCall(vectorStoreId, batchId, limit, order, after, before, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ListVectorStoreFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListVectorStoreFilesResponse listFilesInVectorStoreBatch(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        ApiResponse<ListVectorStoreFilesResponse> resp = listFilesInVectorStoreBatchWithHttpInfo(vectorStoreId, batchId, limit, order, after, before, filter);
        return resp.getData();
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ApiResponse&lt;ListVectorStoreFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListVectorStoreFilesResponse> listFilesInVectorStoreBatchWithHttpInfo(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        com.squareup.okhttp.Call call = listFilesInVectorStoreBatchValidateBeforeCall(vectorStoreId, batchId, limit, order, after, before, filter, null, null);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of vector store files in a batch. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFilesInVectorStoreBatchAsync(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, final ApiCallback<ListVectorStoreFilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFilesInVectorStoreBatchValidateBeforeCall(vectorStoreId, batchId, limit, order, after, before, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVectorStoreFiles
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVectorStoreFilesCall(String vectorStoreId, Integer limit, String order, String after, String before, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVectorStoreFilesValidateBeforeCall(String vectorStoreId, Integer limit, String order, String after, String before, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling listVectorStoreFiles(Async)");
        }
        
        com.squareup.okhttp.Call call = listVectorStoreFilesCall(vectorStoreId, limit, order, after, before, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ListVectorStoreFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListVectorStoreFilesResponse listVectorStoreFiles(String vectorStoreId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        ApiResponse<ListVectorStoreFilesResponse> resp = listVectorStoreFilesWithHttpInfo(vectorStoreId, limit, order, after, before, filter);
        return resp.getData();
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ApiResponse&lt;ListVectorStoreFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListVectorStoreFilesResponse> listVectorStoreFilesWithHttpInfo(String vectorStoreId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        com.squareup.okhttp.Call call = listVectorStoreFilesValidateBeforeCall(vectorStoreId, limit, order, after, before, filter, null, null);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of vector store files. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVectorStoreFilesAsync(String vectorStoreId, Integer limit, String order, String after, String before, String filter, final ApiCallback<ListVectorStoreFilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVectorStoreFilesValidateBeforeCall(vectorStoreId, limit, order, after, before, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVectorStores
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVectorStoresCall(Integer limit, String order, String after, String before, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vector_stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVectorStoresValidateBeforeCall(Integer limit, String order, String after, String before, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listVectorStoresCall(limit, order, after, before, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of vector stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListVectorStoresResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListVectorStoresResponse listVectorStores(Integer limit, String order, String after, String before) throws ApiException {
        ApiResponse<ListVectorStoresResponse> resp = listVectorStoresWithHttpInfo(limit, order, after, before);
        return resp.getData();
    }

    /**
     * Returns a list of vector stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ApiResponse&lt;ListVectorStoresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListVectorStoresResponse> listVectorStoresWithHttpInfo(Integer limit, String order, String after, String before) throws ApiException {
        com.squareup.okhttp.Call call = listVectorStoresValidateBeforeCall(limit, order, after, before, null, null);
        Type localVarReturnType = new TypeToken<ListVectorStoresResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of vector stores. (asynchronously)
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVectorStoresAsync(Integer limit, String order, String after, String before, final ApiCallback<ListVectorStoresResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVectorStoresValidateBeforeCall(limit, order, after, before, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListVectorStoresResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyVectorStore
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyVectorStoreCall(UpdateVectorStoreRequest body, String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}"
            .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyVectorStoreValidateBeforeCall(UpdateVectorStoreRequest body, String vectorStoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modifyVectorStore(Async)");
        }
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling modifyVectorStore(Async)");
        }
        
        com.squareup.okhttp.Call call = modifyVectorStoreCall(body, vectorStoreId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modifies a vector store.
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @return VectorStoreObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VectorStoreObject modifyVectorStore(UpdateVectorStoreRequest body, String vectorStoreId) throws ApiException {
        ApiResponse<VectorStoreObject> resp = modifyVectorStoreWithHttpInfo(body, vectorStoreId);
        return resp.getData();
    }

    /**
     * Modifies a vector store.
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @return ApiResponse&lt;VectorStoreObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VectorStoreObject> modifyVectorStoreWithHttpInfo(UpdateVectorStoreRequest body, String vectorStoreId) throws ApiException {
        com.squareup.okhttp.Call call = modifyVectorStoreValidateBeforeCall(body, vectorStoreId, null, null);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modifies a vector store. (asynchronously)
     * 
     * @param body  (required)
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyVectorStoreAsync(UpdateVectorStoreRequest body, String vectorStoreId, final ApiCallback<VectorStoreObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyVectorStoreValidateBeforeCall(body, vectorStoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

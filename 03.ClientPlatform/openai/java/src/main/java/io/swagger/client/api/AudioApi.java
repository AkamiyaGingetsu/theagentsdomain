/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.CreateSpeechRequest;
import java.io.File;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AudioApi {
    private ApiClient apiClient;

    public AudioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudioApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSpeech
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpeechCall(CreateSpeechRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/audio/speech";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSpeechValidateBeforeCall(CreateSpeechRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSpeech(Async)");
        }
        
        com.squareup.okhttp.Call call = createSpeechCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generates audio from the input text.
     * 
     * @param body  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File createSpeech(CreateSpeechRequest body) throws ApiException {
        ApiResponse<File> resp = createSpeechWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Generates audio from the input text.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> createSpeechWithHttpInfo(CreateSpeechRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createSpeechValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates audio from the input text. (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpeechAsync(CreateSpeechRequest body, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpeechValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTranscription
     * @param file  (required)
     * @param model  (required)
     * @param language  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @param timestampGranularities  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTranscriptionCall(File file, Object model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/audio/transcriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (model != null)
        localVarFormParams.put("model", model);
        if (language != null)
        localVarFormParams.put("language", language);
        if (prompt != null)
        localVarFormParams.put("prompt", prompt);
        if (responseFormat != null)
        localVarFormParams.put("response_format", responseFormat);
        if (temperature != null)
        localVarFormParams.put("temperature", temperature);
        if (timestampGranularities != null)
        localVarFormParams.put("timestamp_granularities[]", timestampGranularities);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTranscriptionValidateBeforeCall(File file, Object model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling createTranscription(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling createTranscription(Async)");
        }
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling createTranscription(Async)");
        }
        // verify the required parameter 'prompt' is set
        if (prompt == null) {
            throw new ApiException("Missing the required parameter 'prompt' when calling createTranscription(Async)");
        }
        // verify the required parameter 'responseFormat' is set
        if (responseFormat == null) {
            throw new ApiException("Missing the required parameter 'responseFormat' when calling createTranscription(Async)");
        }
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling createTranscription(Async)");
        }
        // verify the required parameter 'timestampGranularities' is set
        if (timestampGranularities == null) {
            throw new ApiException("Missing the required parameter 'timestampGranularities' when calling createTranscription(Async)");
        }
        
        com.squareup.okhttp.Call call = createTranscriptionCall(file, model, language, prompt, responseFormat, temperature, timestampGranularities, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Transcribes audio into the input language.
     * 
     * @param file  (required)
     * @param model  (required)
     * @param language  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @param timestampGranularities  (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 createTranscription(File file, Object model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities) throws ApiException {
        ApiResponse<InlineResponse200> resp = createTranscriptionWithHttpInfo(file, model, language, prompt, responseFormat, temperature, timestampGranularities);
        return resp.getData();
    }

    /**
     * Transcribes audio into the input language.
     * 
     * @param file  (required)
     * @param model  (required)
     * @param language  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @param timestampGranularities  (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> createTranscriptionWithHttpInfo(File file, Object model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities) throws ApiException {
        com.squareup.okhttp.Call call = createTranscriptionValidateBeforeCall(file, model, language, prompt, responseFormat, temperature, timestampGranularities, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transcribes audio into the input language. (asynchronously)
     * 
     * @param file  (required)
     * @param model  (required)
     * @param language  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @param timestampGranularities  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTranscriptionAsync(File file, Object model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTranscriptionValidateBeforeCall(file, model, language, prompt, responseFormat, temperature, timestampGranularities, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTranslation
     * @param file  (required)
     * @param model  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTranslationCall(File file, Object model, String prompt, String responseFormat, BigDecimal temperature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/audio/translations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (model != null)
        localVarFormParams.put("model", model);
        if (prompt != null)
        localVarFormParams.put("prompt", prompt);
        if (responseFormat != null)
        localVarFormParams.put("response_format", responseFormat);
        if (temperature != null)
        localVarFormParams.put("temperature", temperature);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTranslationValidateBeforeCall(File file, Object model, String prompt, String responseFormat, BigDecimal temperature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling createTranslation(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling createTranslation(Async)");
        }
        // verify the required parameter 'prompt' is set
        if (prompt == null) {
            throw new ApiException("Missing the required parameter 'prompt' when calling createTranslation(Async)");
        }
        // verify the required parameter 'responseFormat' is set
        if (responseFormat == null) {
            throw new ApiException("Missing the required parameter 'responseFormat' when calling createTranslation(Async)");
        }
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling createTranslation(Async)");
        }
        
        com.squareup.okhttp.Call call = createTranslationCall(file, model, prompt, responseFormat, temperature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Translates audio into English.
     * 
     * @param file  (required)
     * @param model  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 createTranslation(File file, Object model, String prompt, String responseFormat, BigDecimal temperature) throws ApiException {
        ApiResponse<InlineResponse2001> resp = createTranslationWithHttpInfo(file, model, prompt, responseFormat, temperature);
        return resp.getData();
    }

    /**
     * Translates audio into English.
     * 
     * @param file  (required)
     * @param model  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> createTranslationWithHttpInfo(File file, Object model, String prompt, String responseFormat, BigDecimal temperature) throws ApiException {
        com.squareup.okhttp.Call call = createTranslationValidateBeforeCall(file, model, prompt, responseFormat, temperature, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Translates audio into English. (asynchronously)
     * 
     * @param file  (required)
     * @param model  (required)
     * @param prompt  (required)
     * @param responseFormat  (required)
     * @param temperature  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTranslationAsync(File file, Object model, String prompt, String responseFormat, BigDecimal temperature, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTranslationValidateBeforeCall(file, model, prompt, responseFormat, temperature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

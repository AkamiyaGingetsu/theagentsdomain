/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AssistantObject;
import io.swagger.client.model.CreateAssistantRequest;
import io.swagger.client.model.CreateMessageRequest;
import io.swagger.client.model.CreateRunRequest;
import io.swagger.client.model.CreateThreadAndRunRequest;
import io.swagger.client.model.CreateThreadRequest;
import io.swagger.client.model.DeleteAssistantResponse;
import io.swagger.client.model.DeleteMessageResponse;
import io.swagger.client.model.DeleteThreadResponse;
import io.swagger.client.model.ListAssistantsResponse;
import io.swagger.client.model.ListMessagesResponse;
import io.swagger.client.model.ListRunStepsResponse;
import io.swagger.client.model.ListRunsResponse;
import io.swagger.client.model.MessageObject;
import io.swagger.client.model.ModifyAssistantRequest;
import io.swagger.client.model.ModifyMessageRequest;
import io.swagger.client.model.ModifyRunRequest;
import io.swagger.client.model.ModifyThreadRequest;
import io.swagger.client.model.RunObject;
import io.swagger.client.model.RunStepObject;
import io.swagger.client.model.SubmitToolOutputsRunRequest;
import io.swagger.client.model.ThreadObject;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for AssistantsApi
 */
@Ignore
public class AssistantsApiTest {

    private final AssistantsApi api = new AssistantsApi();

    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelRunTest() throws Exception {
        String threadId = null;
        String runId = null;
        RunObject response = api.cancelRun(threadId, runId);

        // TODO: test validations
    }
    /**
     * Create an assistant with a model and instructions.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAssistantTest() throws Exception {
        CreateAssistantRequest body = null;
        AssistantObject response = api.createAssistant(body);

        // TODO: test validations
    }
    /**
     * Create a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createMessageTest() throws Exception {
        CreateMessageRequest body = null;
        String threadId = null;
        MessageObject response = api.createMessage(body, threadId);

        // TODO: test validations
    }
    /**
     * Create a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRunTest() throws Exception {
        CreateRunRequest body = null;
        String threadId = null;
        RunObject response = api.createRun(body, threadId);

        // TODO: test validations
    }
    /**
     * Create a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreadTest() throws Exception {
        CreateThreadRequest body = null;
        ThreadObject response = api.createThread(body);

        // TODO: test validations
    }
    /**
     * Create a thread and run it in one request.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreadAndRunTest() throws Exception {
        CreateThreadAndRunRequest body = null;
        RunObject response = api.createThreadAndRun(body);

        // TODO: test validations
    }
    /**
     * Delete an assistant.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAssistantTest() throws Exception {
        String assistantId = null;
        DeleteAssistantResponse response = api.deleteAssistant(assistantId);

        // TODO: test validations
    }
    /**
     * Deletes a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws Exception {
        String threadId = null;
        String messageId = null;
        DeleteMessageResponse response = api.deleteMessage(threadId, messageId);

        // TODO: test validations
    }
    /**
     * Delete a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreadTest() throws Exception {
        String threadId = null;
        DeleteThreadResponse response = api.deleteThread(threadId);

        // TODO: test validations
    }
    /**
     * Retrieves an assistant.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAssistantTest() throws Exception {
        String assistantId = null;
        AssistantObject response = api.getAssistant(assistantId);

        // TODO: test validations
    }
    /**
     * Retrieve a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMessageTest() throws Exception {
        String threadId = null;
        String messageId = null;
        MessageObject response = api.getMessage(threadId, messageId);

        // TODO: test validations
    }
    /**
     * Retrieves a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRunTest() throws Exception {
        String threadId = null;
        String runId = null;
        RunObject response = api.getRun(threadId, runId);

        // TODO: test validations
    }
    /**
     * Retrieves a run step.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRunStepTest() throws Exception {
        String threadId = null;
        String runId = null;
        String stepId = null;
        RunStepObject response = api.getRunStep(threadId, runId, stepId);

        // TODO: test validations
    }
    /**
     * Retrieves a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreadTest() throws Exception {
        String threadId = null;
        ThreadObject response = api.getThread(threadId);

        // TODO: test validations
    }
    /**
     * Returns a list of assistants.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listAssistantsTest() throws Exception {
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListAssistantsResponse response = api.listAssistants(limit, order, after, before);

        // TODO: test validations
    }
    /**
     * Returns a list of messages for a given thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listMessagesTest() throws Exception {
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        String runId = null;
        ListMessagesResponse response = api.listMessages(threadId, limit, order, after, before, runId);

        // TODO: test validations
    }
    /**
     * Returns a list of run steps belonging to a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listRunStepsTest() throws Exception {
        String threadId = null;
        String runId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListRunStepsResponse response = api.listRunSteps(threadId, runId, limit, order, after, before);

        // TODO: test validations
    }
    /**
     * Returns a list of runs belonging to a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listRunsTest() throws Exception {
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListRunsResponse response = api.listRuns(threadId, limit, order, after, before);

        // TODO: test validations
    }
    /**
     * Modifies an assistant.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyAssistantTest() throws Exception {
        ModifyAssistantRequest body = null;
        String assistantId = null;
        AssistantObject response = api.modifyAssistant(body, assistantId);

        // TODO: test validations
    }
    /**
     * Modifies a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyMessageTest() throws Exception {
        ModifyMessageRequest body = null;
        String threadId = null;
        String messageId = null;
        MessageObject response = api.modifyMessage(body, threadId, messageId);

        // TODO: test validations
    }
    /**
     * Modifies a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyRunTest() throws Exception {
        ModifyRunRequest body = null;
        String threadId = null;
        String runId = null;
        RunObject response = api.modifyRun(body, threadId, runId);

        // TODO: test validations
    }
    /**
     * Modifies a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyThreadTest() throws Exception {
        ModifyThreadRequest body = null;
        String threadId = null;
        ThreadObject response = api.modifyThread(body, threadId);

        // TODO: test validations
    }
    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitToolOuputsToRunTest() throws Exception {
        SubmitToolOutputsRunRequest body = null;
        String threadId = null;
        String runId = null;
        RunObject response = api.submitToolOuputsToRun(body, threadId, runId);

        // TODO: test validations
    }
}

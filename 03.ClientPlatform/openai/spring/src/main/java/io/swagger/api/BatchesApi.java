/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Batch;
import io.swagger.model.BatchesBody;
import io.swagger.model.ListBatchesResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-31T08:43:25.403038835+09:00[Asia/Tokyo]")
@Validated
public interface BatchesApi {

    @Operation(summary = "Cancels an in-progress batch.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Batch" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Batch is cancelling. Returns the cancelling batch's details.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Batch.class))) })
    @RequestMapping(value = "/batches/{batch_id}/cancel",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Batch> cancelBatch(@Parameter(in = ParameterIn.PATH, description = "The ID of the batch to cancel.", required=true, schema=@Schema()) @PathVariable("batch_id") String batchId);


    @Operation(summary = "Creates and executes a batch from an uploaded file of requests", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Batch" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Batch created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Batch.class))) })
    @RequestMapping(value = "/batches",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Batch> createBatch(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody BatchesBody body);


    @Operation(summary = "List your organization's batches.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Batch" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Batch listed successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListBatchesResponse.class))) })
    @RequestMapping(value = "/batches",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListBatchesResponse> listBatches(@Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. " ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit);


    @Operation(summary = "Retrieves a batch.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Batch" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Batch retrieved successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Batch.class))) })
    @RequestMapping(value = "/batches/{batch_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Batch> retrieveBatch(@Parameter(in = ParameterIn.PATH, description = "The ID of the batch to retrieve.", required=true, schema=@Schema()) @PathVariable("batch_id") String batchId);

}


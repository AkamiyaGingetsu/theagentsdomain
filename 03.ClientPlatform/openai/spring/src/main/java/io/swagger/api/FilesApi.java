/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DeleteFileResponse;
import io.swagger.model.ListFilesResponse;
import io.swagger.model.OpenAIFile;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-31T08:43:25.403038835+09:00[Asia/Tokyo]")
@Validated
public interface FilesApi {

    @Operation(summary = "Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.  The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.  The Fine-tuning API only supports `.jsonl` files.  The Batch API only supports `.jsonl` files up to 100 MB in size.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Files" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))) })
    @RequestMapping(value = "/files",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<OpenAIFile> createFile(@Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema(allowableValues={ "assistants", "batch", "fine-tune", "vision" }
)) @RequestParam(value="purpose", required=true)  String purpose);


    @Operation(summary = "Delete a file.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Files" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteFileResponse.class))) })
    @RequestMapping(value = "/files/{file_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteFileResponse> deleteFile(@Parameter(in = ParameterIn.PATH, description = "The ID of the file to use for this request.", required=true, schema=@Schema()) @PathVariable("file_id") String fileId);


    @Operation(summary = "Returns the contents of the specified file.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Files" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/files/{file_id}/content",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> downloadFile(@Parameter(in = ParameterIn.PATH, description = "The ID of the file to use for this request.", required=true, schema=@Schema()) @PathVariable("file_id") String fileId);


    @Operation(summary = "Returns a list of files that belong to the user's organization.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Files" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListFilesResponse.class))) })
    @RequestMapping(value = "/files",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListFilesResponse> listFiles(@Parameter(in = ParameterIn.QUERY, description = "Only return files with the given purpose." ,schema=@Schema()) @Valid @RequestParam(value = "purpose", required = false) String purpose);


    @Operation(summary = "Returns information about a specific file.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Files" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))) })
    @RequestMapping(value = "/files/{file_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OpenAIFile> retrieveFile(@Parameter(in = ParameterIn.PATH, description = "The ID of the file to use for this request.", required=true, schema=@Schema()) @PathVariable("file_id") String fileId);

}


/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AssistantObject;
import io.swagger.model.CreateAssistantRequest;
import io.swagger.model.DeleteAssistantResponse;
import io.swagger.model.ListAssistantsResponse;
import io.swagger.model.ModifyAssistantRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-31T08:43:25.403038835+09:00[Asia/Tokyo]")
@Validated
public interface AssistantsApi {

    @Operation(summary = "Create an assistant with a model and instructions.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantObject.class))) })
    @RequestMapping(value = "/assistants",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AssistantObject> createAssistant(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateAssistantRequest body);


    @Operation(summary = "Delete an assistant.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteAssistantResponse.class))) })
    @RequestMapping(value = "/assistants/{assistant_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteAssistantResponse> deleteAssistant(@Parameter(in = ParameterIn.PATH, description = "The ID of the assistant to delete.", required=true, schema=@Schema()) @PathVariable("assistant_id") String assistantId);


    @Operation(summary = "Retrieves an assistant.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantObject.class))) })
    @RequestMapping(value = "/assistants/{assistant_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AssistantObject> getAssistant(@Parameter(in = ParameterIn.PATH, description = "The ID of the assistant to retrieve.", required=true, schema=@Schema()) @PathVariable("assistant_id") String assistantId);


    @Operation(summary = "Returns a list of assistants.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListAssistantsResponse.class))) })
    @RequestMapping(value = "/assistants",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListAssistantsResponse> listAssistants(@Parameter(in = ParameterIn.QUERY, description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. " ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. " ,schema=@Schema(allowableValues={ "asc", "desc" }
, defaultValue="desc")) @Valid @RequestParam(value = "order", required = false, defaultValue="desc") String order, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "before", required = false) String before);


    @Operation(summary = "Modifies an assistant.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantObject.class))) })
    @RequestMapping(value = "/assistants/{assistant_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AssistantObject> modifyAssistant(@Parameter(in = ParameterIn.PATH, description = "The ID of the assistant to modify.", required=true, schema=@Schema()) @PathVariable("assistant_id") String assistantId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyAssistantRequest body);

}


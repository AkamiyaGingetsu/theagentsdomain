/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreateFineTuningJobRequest;
import io.swagger.model.FineTuningJob;
import io.swagger.model.ListFineTuningJobCheckpointsResponse;
import io.swagger.model.ListFineTuningJobEventsResponse;
import io.swagger.model.ListPaginatedFineTuningJobsResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-31T08:43:25.403038835+09:00[Asia/Tokyo]")
@Validated
public interface FineTuningApi {

    @Operation(summary = "Immediately cancel a fine-tune job. ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Fine-tuning" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FineTuningJob.class))) })
    @RequestMapping(value = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<FineTuningJob> cancelFineTuningJob(@Parameter(in = ParameterIn.PATH, description = "The ID of the fine-tuning job to cancel. ", required=true, schema=@Schema()) @PathVariable("fine_tuning_job_id") String fineTuningJobId);


    @Operation(summary = "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Fine-tuning" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FineTuningJob.class))) })
    @RequestMapping(value = "/fine_tuning/jobs",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<FineTuningJob> createFineTuningJob(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateFineTuningJobRequest body);


    @Operation(summary = "Get status updates for a fine-tuning job. ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Fine-tuning" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListFineTuningJobEventsResponse.class))) })
    @RequestMapping(value = "/fine_tuning/jobs/{fine_tuning_job_id}/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListFineTuningJobEventsResponse> listFineTuningEvents(@Parameter(in = ParameterIn.PATH, description = "The ID of the fine-tuning job to get events for. ", required=true, schema=@Schema()) @PathVariable("fine_tuning_job_id") String fineTuningJobId, @Parameter(in = ParameterIn.QUERY, description = "Identifier for the last event from the previous pagination request." ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "Number of events to retrieve." ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit);


    @Operation(summary = "List checkpoints for a fine-tuning job. ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Fine-tuning" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListFineTuningJobCheckpointsResponse.class))) })
    @RequestMapping(value = "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListFineTuningJobCheckpointsResponse> listFineTuningJobCheckpoints(@Parameter(in = ParameterIn.PATH, description = "The ID of the fine-tuning job to get checkpoints for. ", required=true, schema=@Schema()) @PathVariable("fine_tuning_job_id") String fineTuningJobId, @Parameter(in = ParameterIn.QUERY, description = "Identifier for the last checkpoint ID from the previous pagination request." ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "Number of checkpoints to retrieve." ,schema=@Schema( defaultValue="10")) @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit);


    @Operation(summary = "List your organization's fine-tuning jobs ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Fine-tuning" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListPaginatedFineTuningJobsResponse.class))) })
    @RequestMapping(value = "/fine_tuning/jobs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListPaginatedFineTuningJobsResponse> listPaginatedFineTuningJobs(@Parameter(in = ParameterIn.QUERY, description = "Identifier for the last job from the previous pagination request." ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "Number of fine-tuning jobs to retrieve." ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit);


    @Operation(summary = "Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Fine-tuning" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FineTuningJob.class))) })
    @RequestMapping(value = "/fine_tuning/jobs/{fine_tuning_job_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FineTuningJob> retrieveFineTuningJob(@Parameter(in = ParameterIn.PATH, description = "The ID of the fine-tuning job. ", required=true, schema=@Schema()) @PathVariable("fine_tuning_job_id") String fineTuningJobId);

}


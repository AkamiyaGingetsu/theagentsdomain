/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreateMessageRequest;
import io.swagger.model.CreateRunRequest;
import io.swagger.model.CreateThreadAndRunRequest;
import io.swagger.model.CreateThreadRequest;
import io.swagger.model.DeleteMessageResponse;
import io.swagger.model.DeleteThreadResponse;
import io.swagger.model.ListMessagesResponse;
import io.swagger.model.ListRunStepsResponse;
import io.swagger.model.ListRunsResponse;
import io.swagger.model.MessageObject;
import io.swagger.model.ModifyMessageRequest;
import io.swagger.model.ModifyRunRequest;
import io.swagger.model.ModifyThreadRequest;
import io.swagger.model.RunObject;
import io.swagger.model.RunStepObject;
import io.swagger.model.SubmitToolOutputsRunRequest;
import io.swagger.model.ThreadObject;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-31T08:43:25.403038835+09:00[Asia/Tokyo]")
@Validated
public interface ThreadsApi {

    @Operation(summary = "Cancels a run that is `in_progress`.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs/{run_id}/cancel",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RunObject> cancelRun(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to which this run belongs.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run to cancel.", required=true, schema=@Schema()) @PathVariable("run_id") String runId);


    @Operation(summary = "Create a message.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/messages",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MessageObject> createMessage(@Parameter(in = ParameterIn.PATH, description = "The ID of the [thread](/docs/api-reference/threads) to create a message for.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateMessageRequest body);


    @Operation(summary = "Create a run.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RunObject> createRun(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to run.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateRunRequest body);


    @Operation(summary = "Create a thread.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))) })
    @RequestMapping(value = "/threads",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ThreadObject> createThread(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CreateThreadRequest body);


    @Operation(summary = "Create a thread and run it in one request.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))) })
    @RequestMapping(value = "/threads/runs",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RunObject> createThreadAndRun(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateThreadAndRunRequest body);


    @Operation(summary = "Deletes a message.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteMessageResponse.class))) })
    @RequestMapping(value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteMessageResponse> deleteMessage(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to which this message belongs.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the message to delete.", required=true, schema=@Schema()) @PathVariable("message_id") String messageId);


    @Operation(summary = "Delete a thread.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteThreadResponse.class))) })
    @RequestMapping(value = "/threads/{thread_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteThreadResponse> deleteThread(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to delete.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId);


    @Operation(summary = "Retrieve a message.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MessageObject> getMessage(@Parameter(in = ParameterIn.PATH, description = "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the message to retrieve.", required=true, schema=@Schema()) @PathVariable("message_id") String messageId);


    @Operation(summary = "Retrieves a run.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs/{run_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RunObject> getRun(@Parameter(in = ParameterIn.PATH, description = "The ID of the [thread](/docs/api-reference/threads) that was run.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run to retrieve.", required=true, schema=@Schema()) @PathVariable("run_id") String runId);


    @Operation(summary = "Retrieves a run step.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunStepObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RunStepObject> getRunStep(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to which the run and run step belongs.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run to which the run step belongs.", required=true, schema=@Schema()) @PathVariable("run_id") String runId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run step to retrieve.", required=true, schema=@Schema()) @PathVariable("step_id") String stepId);


    @Operation(summary = "Retrieves a thread.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ThreadObject> getThread(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to retrieve.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId);


    @Operation(summary = "Returns a list of messages for a given thread.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListMessagesResponse.class))) })
    @RequestMapping(value = "/threads/{thread_id}/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListMessagesResponse> listMessages(@Parameter(in = ParameterIn.PATH, description = "The ID of the [thread](/docs/api-reference/threads) the messages belong to.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.QUERY, description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. " ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. " ,schema=@Schema(allowableValues={ "asc", "desc" }
, defaultValue="desc")) @Valid @RequestParam(value = "order", required = false, defaultValue="desc") String order, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "before", required = false) String before, @Parameter(in = ParameterIn.QUERY, description = "Filter messages by the run ID that generated them. " ,schema=@Schema()) @Valid @RequestParam(value = "run_id", required = false) String runId);


    @Operation(summary = "Returns a list of run steps belonging to a run.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListRunStepsResponse.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs/{run_id}/steps",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListRunStepsResponse> listRunSteps(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread the run and run steps belong to.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run the run steps belong to.", required=true, schema=@Schema()) @PathVariable("run_id") String runId, @Parameter(in = ParameterIn.QUERY, description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. " ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. " ,schema=@Schema(allowableValues={ "asc", "desc" }
, defaultValue="desc")) @Valid @RequestParam(value = "order", required = false, defaultValue="desc") String order, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "before", required = false) String before);


    @Operation(summary = "Returns a list of runs belonging to a thread.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListRunsResponse.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListRunsResponse> listRuns(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread the run belongs to.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.QUERY, description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. " ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. " ,schema=@Schema(allowableValues={ "asc", "desc" }
, defaultValue="desc")) @Valid @RequestParam(value = "order", required = false, defaultValue="desc") String order, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "after", required = false) String after, @Parameter(in = ParameterIn.QUERY, description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. " ,schema=@Schema()) @Valid @RequestParam(value = "before", required = false) String before);


    @Operation(summary = "Modifies a message.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MessageObject> modifyMessage(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to which this message belongs.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the message to modify.", required=true, schema=@Schema()) @PathVariable("message_id") String messageId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyMessageRequest body);


    @Operation(summary = "Modifies a run.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs/{run_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RunObject> modifyRun(@Parameter(in = ParameterIn.PATH, description = "The ID of the [thread](/docs/api-reference/threads) that was run.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run to modify.", required=true, schema=@Schema()) @PathVariable("run_id") String runId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyRunRequest body);


    @Operation(summary = "Modifies a thread.", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ThreadObject> modifyThread(@Parameter(in = ParameterIn.PATH, description = "The ID of the thread to modify. Only the `metadata` can be modified.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyThreadRequest body);


    @Operation(summary = "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. ", description = "", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "Assistants" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))) })
    @RequestMapping(value = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RunObject> submitToolOuputsToRun(@Parameter(in = ParameterIn.PATH, description = "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.", required=true, schema=@Schema()) @PathVariable("thread_id") String threadId, @Parameter(in = ParameterIn.PATH, description = "The ID of the run that requires the tool output submission.", required=true, schema=@Schema()) @PathVariable("run_id") String runId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody SubmitToolOutputsRunRequest body);

}

